<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[正则表达式教程]]></title>
    <url>%2F2019%2F03%2F20%2Fregex%2F</url>
    <content type="text"><![CDATA[本文作者：deerchao，版本：2.3.5，原文链接，本文根据个人使用环境有极少量修改 本文目标30分钟内让你明白正则表达式是什么，并对它有一些基本的了解，让你可以在自己的程序或网页里使用它。 如何使用本教程&emsp;&emsp;别被下面那些复杂的表达式吓倒，只要跟着我一步一步来，你会发现正则表达式其实并没有想像中的那么困难。当然，如果你看完了这篇教程之后，发现自己明白了很多，却又几乎什么都记不得，那也是很正常的——我认为，没接触过正则表达式的人在看完这篇教程后，能把提到过的语法记住80%以上的可能性为零。这里只是让你明白基本的原理，以后你还需要多练习，多使用，才能熟练掌握正则表达式。&emsp;&emsp;除了作为入门教程之外，本文还试图成为可以在日常工作中使用的正则表达式语法参考手册。就作者本人的经历来说，这个目标还是完成得不错的——你看，我自己也没能把所有的东西记下来，不是吗？ 最重要的是——请给我30分钟，如果你没有使用正则表达式的经验，请不要试图在30秒内入门——除非你是超人 :) 文本格式约定：专业术语 元字符/语法格式 正则表达式 正则表达式中的一部分(用于分析) 对其进行匹配的源字符串 对正则表达式或其中一部分的说明 正则表达式到底是什么东西？&emsp;&emsp;在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。&emsp;&emsp;很可能你使用过Windows/Dos下用于文件查找的通配符(wildcard)，也就是 * 和 ? 。如果你想查找某个目录下的所有的Word文档的话，你会搜索 *.doc。在这里， * 会被解释成任意的字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串(像010-12345678或0376-7654321)。 入门&emsp;&emsp;学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。&emsp;&emsp;假设你在一篇英文小说里查找 hi，你可以使用正则表达式 hi。&emsp;&emsp;这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是h,后一个是i。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配 hi,HI,Hi,hI 这四种情况中的任意一种。&emsp;&emsp;不幸的是，很多单词里包含 hi 这两个连续的字符，比如 him, history, high等等。用 hi 来查找的话，这里边的 hi 也会被找出来。如果要 精确地查找hi这个单词 的话，我们应该使用 \bhi\b。 &emsp;&emsp;\b 是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter ），代表着 单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是 \b 并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。 如果需要更精确的说法，\b匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在) \w。 &emsp;&emsp;假如你要找的是 hi后面不远处跟着一个Lucy，你应该用\bhi\b.*\bLucy\b。 &emsp;&emsp;这里，. 是另一个元字符，匹配 除了换行符以外的任意字符。* 同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定 *前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.* 连在一起就意味着 任意数量的不包含换行的字符。现在 \bhi\b.*\bLucy\b 的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。 换行符就是’\n’,ASCII编码为10(十六进制0x0A)的字符。 &emsp;&emsp;如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：&emsp;&emsp;0\d\d-\d\d\d\d\d\d\d\d匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字&lt;(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。&emsp;&emsp;这里的 \d 是个新的元字符，匹配 一位数字(0，或1，或2，或……)。- 不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。&emsp;&emsp;为了避免那么多烦人的重复，我们也可以这样写这个表达式：0\d{2}-\d{8}。这里 \d 后面的 {2} ( {8} )的意思是前面 \d 必须连续重复匹配2次(8次)。 测试正则表达式&emsp;&emsp;如果你不觉得正则表达式很难读写的话，要么你是一个天才，要么，你不是地球人。正则表达式的语法很令人头疼，即使对经常使用它的人来说也是如此。由于难于读写，容易出错，所以找一种工具对正则表达式进行测试是很有必要的。以下是几个常用的在线正则表达式测试工具：菜鸟工具-正则表达式测试工具开源中国-正则表达式测试工具站长工具-正则表达式测试工具 元字符&emsp;&emsp;现在你已经知道几个很有用的元字符了，如 \b, ., *，还有 \d. 正则表达式里还有更多的元字符，比如 \s匹配 任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。\w匹配 字母或数字或下划线或汉字等。 需要注意的是，不同平台下对正则表达式的支持略有不同，具体情况需查看相关文档。 &emsp;&emsp;下面来看看更多的例子：&emsp;&emsp;\ba\w\b 匹配 以字母a开头的单词——先是某个单词开始处( \b )，然后是字母a,然后是任意数量的字母或数字( \w )，最后是单词结束处( \b )。 好吧，现在我们说说正则表达式里的单词是什么意思吧：就是不少于一个的连续的\w。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :)\d+匹配1个或更多连续的数字。这里的+是和类似的元字符，不同的是匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。 \b\w{6}\b 匹配刚好6个字符的单词。 表1.常用的元字符代码 说明. 匹配除换行符以外的任意字符\w 匹配字母或数字或下划线或汉字\s 匹配任意的空白符\d 匹配数字\b 匹配单词的开始或结束^ 匹配字符串的开始$ 匹配字符串的结束正则表达式引擎通常会提供一个“测试指定的字符串是否匹配一个正则表达式”的方法，如JavaScript里的RegExp.test()方法或.NET里的Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用^和$的话，对于\d{5,12}而言，使用这样的方法就只能保证字符串里包含5到12连续位数字，而不是整个字符串就是5到12位数字。元字符^（和数字6在同一个键位上的符号）和$都匹配一个位置，这和\b有点类似。^匹配你要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：^\d{5,12}$。 这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。 因为使用了^和$，所以输入的整个字符串都要用来和\d{5,12}来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。 和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^和$的意义就变成了匹配行的开始处和结束处。 字符转义重复字符类分枝条件反义分组后向引用零宽断言负向零宽断言注释贪婪与懒惰处理选项平衡组/递归匹配还有些什么东西没提到联系作者网上的资源及本文参考文献更新纪录]]></content>
      <categories>
        <category>development</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown的一些用法]]></title>
    <url>%2F2019%2F03%2F14%2Fmarkdown-usage%2F</url>
    <content type="text"><![CDATA[记录了本人在使用markdown过程中遇到的一些小疑问 换行 使用&lt;br/&gt;标签 在末尾使用两个空格，然后回车 首行缩进使用特殊占位符123&amp;ensp;或&amp;#8194; //半角&amp;emsp;或&amp;#8195; //全角&amp;nbsp;或&amp;#160; 注意不要少了;]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7 安装Python 3]]></title>
    <url>%2F2019%2F03%2F14%2Fcentos-install-python3%2F</url>
    <content type="text"><![CDATA[CentOS 7 安装Python3 CentOS 7 默认值安装有Python 2.x 解释器，并不含有Python 3的解释器，需要单独安装 12345sudo yum updatesudo yum install yum-utilssudo yum groupinstall developmentsudo yum install https://centos7.iuscommunity.org/ius-release.rpmsudo yum install python36u]]></content>
      <categories>
        <category>linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7网络配置]]></title>
    <url>%2F2019%2F03%2F14%2Fcentos-network-configuration%2F</url>
    <content type="text"><![CDATA[CentOS 7 网络配置 问题描述：以最小模式安装好CentOS 7后，发现无法连接网络，ifconfig命令也无法使用 先检查ifconfig命令无法使用的原因使用echo $PATH命令，检查$PATH是否配置正确，结果显示如下： 12[root@localhost ~]# ehco $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin 从返回的结果来看，系统的bin目录已经包含在内，可以推测出，CentOS的最小安装模式默认没有ifconfig命令。因此，我们需要先想办法将虚拟机连接至网络，再通过yum源来安装ifconfig命令 设置虚拟机网络连接使用ip addr命令，查看网卡当前设置，结果如下： 123456789[root@localhost ~]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever prefered_lft forever inet6 ::1/128 scope host valid_lft forever prefered_lft forever2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 08:00:27:0f:d6:f6 brd ff:ff:ff:ff:ff:ff 在这里，可以看到enp0s3这块网卡，应该就是虚拟机的网卡，但是这块网卡当前并未分配IP地址。既然没有ip地址，那直接去/etc/sysconfig/network-scripts目录中看一下的网卡ip信息的配置文件名吧。 12345678910[root@localhost ~]# ls /etc/sysconfig/network-scriptsifcfg-enp0s3 ifdown-ppp ifup-eth ifup-sitifcfg-lo ifdown-routes ifup-ippp ifup-Teamifdown ifdown-sit ifup-ipv6 ifup-TeamPortifdown-dnep ifdown-Team ifup-isdn ifup-tunnelifdown-eth ifdown-TeamPort ifup-plip ifup-wirelessifdown-ippp ifdown-tunnel ifup-plusb init.ipv6-globalifdown-ipv6 ifup ifup-post network-functionsifdown-isdn ifup-aliases ifup-ppp network-functions-ipv6ifdown-post ifup-bnep ifup-routes 从显示的结果来看，网卡的配置文件应当为ifcfg-enp0s3，查看该文件内容： 12345678910111213141516[root@centos1 ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp2s0TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=dhcpDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=enp0s3UUID=13cbc11b-fdc9-4663-ab1a-fbc3e279c85cONBOOT=no 可以看到，BOOTPROTO=dhcp已经将IP地址的获取设置为dhcp模式，但是ONBOOT=no将网卡随开机启动设置为关闭状态，所以我们要将其设置为ONBOOT=yes。设置完成后，可以使用ifup enp0s3命令，启动网卡，也可以用shutdown -r命令，重启系统。重启系统之后，再用ip addr命令查看其网卡设置： 12345678910111213[root@localhost ~]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 08:00:27:0f:d6:f6 brd ff:ff:ff:ff:ff:ff inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic enp0s3 valid_lft 86257sec preferred_lft 86257sec inet6 fe80::facf:7da3:d61b:6a39/64 scope link noprefixroute valid_lft forever preferred_lft forever 因为以最小模式安装CentOS 7，就已经默认安装并启动了ssh，因此就可以通过ssh连接虚拟机，愉快的玩耍了。 安装ipconfig命令通过ping命令，可以查看现在虚拟机是否已经连接外网： 1234[root@localhost ~]# ping www.baidu.comPING www.a.shifen.com (112.34.112.40) 56(84) bytes of data.64 bytes from 112.34.112.40 (112.34.112.40): icmp_seq=1 ttl=63 time=19.2 ms64 bytes from 112.34.112.40 (112.34.112.40): icmp_seq=2 ttl=63 time=19.8 ms 如上所示，已经能够成功连接外网，下面所要做的就是利用yum install net-tools命令，安装ipconfig。安装完成后，即可使用ifconfig命令： 123456789101112131415161718[root@localhost ~]# ifconfigenp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 10.0.2.15 netmask 255.255.255.0 broadcast 10.0.2.255 inet6 fe80::facf:7da3:d61b:6a39 prefixlen 64 scopeid 0x20&lt;link&gt; ether 08:00:27:0f:d6:f6 txqueuelen 1000 (Ethernet) RX packets 7827 bytes 10002300 (9.5 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 3324 bytes 220777 (215.6 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 linux 系统下网卡启动与关闭命令汇总 ifup | ifdown {interface}：&emsp;&emsp;ifup与ifdown真是太简单了。这两个程序其实是script而已，它会直接到 /etc/ sysconfig/network-scripts目录下搜索对应的配置文件，例如ifup eth0，它会找出ifcfg-eth0这个文件的内容，然后加以设置。不过，由于这两个程序主要是搜索设置文件（ifcfg-ethx）来进行启动与关闭的，所以在使用前请确定ifcfg-ethx是否真的存在于正确的目录内，否则会启动失败。另外，如果以ifconfig eth0来设置或者是修改了网络接口后，就无法再以ifdown eth0的方式来关闭了。因为ifdown会分析比较目前的网络参数与ifcfg-eth0是否相符，不符的话，就会放弃这次操作。因此，使用ifconfig修改完毕后，应该要以ifconfig eth0 down才能够关闭该接口。 /etc/init.d/network start | stop | restart service network start | stop | restart]]></content>
      <categories>
        <category>linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
