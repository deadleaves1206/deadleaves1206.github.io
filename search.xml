<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker添加国内镜像源</title>
    <url>/2020/08/23/add-registry-mirror-to-docker/</url>
    <content><![CDATA[<p>摘要：本文简单讲解了如何配置Docker国内镜像源，提高docker镜像的下载速度</p>
<a id="more"></a>
<h2 id="国内常用源">1. 国内常用源</h2>
<ul>
<li><a href="https://registry.docker-cn.com" class="uri">https://registry.docker-cn.com</a> - Docker中国区官方镜像</li>
<li><a href="https://dockerhub.azk8s.cn" class="uri">https://dockerhub.azk8s.cn</a> - Azure镜像</li>
<li><a href="http://hub-mirror.c.163.com" class="uri">http://hub-mirror.c.163.com</a> - 网易镜像</li>
<li><a href="https://docker.mirrors.ustc.edu.cn" class="uri">https://docker.mirrors.ustc.edu.cn</a> - 科大镜像站</li>
<li>阿里云也有镜像，只不过需要登录<a href="https://cr.console.aliyun.com/">阿里云控制台</a>后获取自己专属的镜像源。</li>
</ul>
<h2 id="设置方法">2. 设置方法</h2>
<h3 id="macos">2.1. macOS</h3>
<p>在macOS中配置是比较简单的。<br />
点击Docker Desktop小图标，在下来菜单中选择<code>Preferences</code>，打开配置页面。<br />
打开<code>Docker Engine</code>选项卡，修改右侧配置文件，添加<code>registry-mirrors</code>配置项。</p>
<figure class="highlight json"><figcaption><span>原文件</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><figcaption><span>添加registry-mirrors配置项</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="linux">2.2. Linux</h3>
<h4 id="修改配置文件">2.2.1. 修改配置文件</h4>
<p>打开Docker配置文件，Linux下的默认配置文件是<code>/etc/docker/daemon.json</code>，添加<code>registry-mirrors</code>配置项</p>
<figure class="highlight json"><figcaption><span>daemon.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://&lt;my-docker-mirror-host&gt;&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="以参数方式启动docker">2.2.2. 以参数方式启动Docker</h4>
<p>手动启动dockerd的时候，添加<code>--registry-mirror</code>参数</p>
<figure class="highlight bash"><figcaption><span>以参数方式启动Docker</span></figcaption><table><tr><td class="code"><pre><span class="line">dockerd --registry-mirror=https://&lt;my-docker-mirror-host&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装Python 3</title>
    <url>/2019/03/14/centos-install-python3/</url>
    <content><![CDATA[<h2 id="centos-7-安装python3">CentOS 7 安装Python3</h2>
<p>摘要：CentOS 7 默认只安装有Python 2.x 解释器，并不含有Python 3的解释器，需要单独安装，本文讲解了如何在CentOS 7 中安装Python 3</p>
<a id="more"></a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install yum-utils</span><br><span class="line">sudo yum groupinstall development</span><br><span class="line">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class="line">sudo yum install python36u</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7网络配置</title>
    <url>/2019/03/14/centos-network-configuration/</url>
    <content><![CDATA[<p>摘要：以最小模式安装好CentOS 7后，发现无法连接网络，ifconfig命令也无法使用，本文记录了以最小模式安装CentOS 7之后进行网络配置的过程</p>
<a id="more"></a>
<h2 id="centos-7-网络配置">CentOS 7 网络配置</h2>
<ol type="1">
<li><p>先检查<code>ifconfig</code>命令无法使用的原因<br />
使用<code>echo $PATH</code>命令，检查<code>$PATH</code>是否配置正确，结果显示如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ehco $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>
<p>从返回的结果来看，系统的bin目录已经包含在内，可以推测出，CentOS的最小安装模式默认没有<code>ifconfig</code>命令。因此，我们需要先想办法将虚拟机连接至网络，再通过yum源来安装ifconfig命令</p></li>
<li><p>设置虚拟机网络连接 使用<code>ip addr</code>命令，查看网卡当前设置，结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever prefered_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever prefered_lft forever</span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:0f:d6:f6 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>
<p>在这里，可以看到enp0s3这块网卡，应该就是虚拟机的网卡，但是这块网卡当前并未分配IP地址。既然没有ip地址，那直接去<code>/etc/sysconfig/network-scripts</code>目录中看一下的网卡ip信息的配置文件名吧。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls /etc/sysconfig/network-scripts</span><br><span class="line">ifcfg-enp0s3     ifdown-ppp          ifup-eth        ifup-sit</span><br><span class="line">ifcfg-lo         ifdown-routes       ifup-ippp       ifup-Team</span><br><span class="line">ifdown           ifdown-sit          ifup-ipv6       ifup-TeamPort</span><br><span class="line">ifdown-dnep      ifdown-Team         ifup-isdn       ifup-tunnel</span><br><span class="line">ifdown-eth       ifdown-TeamPort     ifup-plip       ifup-wireless</span><br><span class="line">ifdown-ippp      ifdown-tunnel       ifup-plusb      init.ipv6-global</span><br><span class="line">ifdown-ipv6      ifup                ifup-post       network-functions</span><br><span class="line">ifdown-isdn      ifup-aliases        ifup-ppp        network-functions-ipv6</span><br><span class="line">ifdown-post      ifup-bnep           ifup-routes</span><br></pre></td></tr></table></figure>
<p>从显示的结果来看，网卡的配置文件应当为<code>ifcfg-enp0s3</code>，查看该文件内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos1 ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp2s0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s3</span><br><span class="line">UUID=13cbc11b-fdc9-4663-ab1a-fbc3e279c85c</span><br><span class="line">ONBOOT=no</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>BOOTPROTO=dhcp</code>已经将IP地址的获取设置为dhcp模式，但是<code>ONBOOT=no</code>将网卡随开机启动设置为关闭状态，所以我们要将其设置为<code>ONBOOT=yes</code>。设置完成后，可以使用<code>ifup enp0s3</code>命令，启动网卡，也可以用<code>shutdown -r</code>命令，重启系统。重启系统之后，再用<code>ip addr</code>命令查看其网卡设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:0f:d6:f6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic enp0s3</span><br><span class="line">       valid_lft 86257sec preferred_lft 86257sec</span><br><span class="line">    inet6 fe80::facf:7da3:d61b:6a39/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
<p>因为以最小模式安装CentOS 7，就已经默认安装并启动了ssh，因此就可以通过ssh连接虚拟机，愉快的玩耍了。</p></li>
<li><p>安装<code>ipconfig</code>命令<br />
通过<code>ping</code>命令，可以查看现在虚拟机是否已经连接外网：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (112.34.112.40) 56(84) bytes of data.</span><br><span class="line">64 bytes from 112.34.112.40 (112.34.112.40): icmp_seq=1 ttl=63 time=19.2 ms</span><br><span class="line">64 bytes from 112.34.112.40 (112.34.112.40): icmp_seq=2 ttl=63 time=19.8 ms</span><br></pre></td></tr></table></figure>
<p>如上所示，已经能够成功连接外网，下面所要做的就是利用<code>yum install net-tools</code>命令，安装<code>ipconfig</code>。安装完成后，即可使用<code>ifconfig</code>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ifconfig</span><br><span class="line">enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255</span><br><span class="line">        inet6 fe80::facf:7da3:d61b:6a39  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:0f:d6:f6  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 7827  bytes 10002300 (9.5 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3324  bytes 220777 (215.6 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<h2 id="linux-系统下网卡启动与关闭命令汇总">linux 系统下网卡启动与关闭命令汇总</h2></li>
<li><p>ifup | ifdown {interface}：<br />
  ifup与ifdown真是太简单了。这两个程序其实是script而已，它会直接到 /etc/ sysconfig/network-scripts目录下搜索对应的配置文件，例如ifup eth0，它会找出ifcfg-eth0这个文件的内容，然后加以设置。不过，由于这两个程序主要是搜索设置文件（ifcfg-ethx）来进行启动与关闭的，所以在使用前请确定ifcfg-ethx是否真的存在于正确的目录内，否则会启动失败。另外，如果以ifconfig eth0来设置或者是修改了网络接口后，就无法再以ifdown eth0的方式来关闭了。因为ifdown会分析比较目前的网络参数与ifcfg-eth0是否相符，不符的话，就会放弃这次操作。因此，使用ifconfig修改完毕后，应该要以ifconfig eth0 down才能够关闭该接口。</p></li>
<li><p>/etc/init.d/network start | stop | restart</p></li>
<li><p>service network start | stop | restart</p></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使hexo(next)支持流程图</title>
    <url>/2020/08/12/hexo-flowchart-mermaid/</url>
    <content><![CDATA[<p>摘要：使hexo支持流程图，该方案基于<code>mermaid.js</code></p>
<a id="more"></a>
<blockquote>
<p>本文参考 <a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">hexo-filter-mermaid-diagrams</a> 本文基于next主题配置，而next模板已经内置了对<code>mermaid.js</code>支持。</p>
</blockquote>
<h2 id="安装插件">1. 安装插件</h2>
<p>在站点根目录执行如下命令，安装插件</p>
<p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure> ## 2. 编辑配置</p>
<h3 id="站点配置">2.1 站点配置</h3>
<p>配置站点<code>_config.yml</code>文件，在文件最后添加如下内容：</p>
<p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># mermaid chart</span></span><br><span class="line"><span class="attr">mermaid:</span> <span class="comment">## mermaid url https://github.com/knsv/mermaid</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># default true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;7.1.2&quot;</span> <span class="comment"># default v7.1.2</span></span><br><span class="line">  <span class="attr">options:</span>  <span class="comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span></span><br><span class="line">    <span class="comment">#startOnload: true  // default true</span></span><br></pre></td></tr></table></figure> ### 2.2 主题配置</p>
<p>配置主题<code>_config.yml</code>文件，在文件中找到如下内容：</p>
<p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">forest</span></span><br></pre></td></tr></table></figure></p>
<p>将其中的<code>enable: false</code>设置为<code>true</code>，并根据需要更改主题</p>
<h2 id="mermaid语法">3. mermaid语法</h2>
<blockquote>
<p>如果想要测试<code>mermaid</code>语法，可以使用<a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbkFbQ2hyaXN0bWFzXSAtLT58R2V0IG1vbmV5fCBCKEdvIHNob3BwaW5nKVxuQiAtLT4gQ3tMZXQgbWUgdGhpbmt9XG5DIC0tPnxPbmV8IERbTGFwdG9wXVxuQyAtLT58VHdvfCBFW2lQaG9uZV1cbkMgLS0-fFRocmVlfCBGW2ZhOmZhLWNhciBDYXJdXG4iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ">mermaid在线编辑器</a><br />
语法参考<a href="http://blog.lisp4fun.com/2017/11/21/mermaiduse">Markdown 绘图插件之 Mermaid 语法</a></p>
</blockquote>
<h2 id="测试">4. 测试</h2>
<pre class="mermaid">sequenceDiagram
    participant Alice
    participant Bob
    Alice->>John: Hello John, how are you?
    loop Healthcheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts <br/>prevail!
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!</pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>flowchart</tag>
        <tag>mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装在国内安装并使用Android Studio（各种代理或镜像的配置）</title>
    <url>/2021/03/05/how-to-install-android-studio/</url>
    <content><![CDATA[<h2 id="摘要">0. 摘要</h2>
<p>在国内，因为众所周知的原因，Google被墙，导致Android相关资源下载很困难，Android Studio在使用过程中出现各种预料之外的情况，这里记录一下自己的踩坑记录，为以后安装做个指导。</p>
<a id="more"></a>
<p>因为JDK的安装很简单，所以我们就直接跳过JDK的安装和配置，直接开始Android Studio的安装。</p>
<h2 id="下载android-studio">1. 下载Android Studio</h2>
<p>上来第一步就是一个大坑，Android Studio的官网根本打不开，这里列举几个国内比较常用的下载源：</p>
<ul>
<li><a href="http://www.android-studio.org/">Android Studio社区</a>：比较权威的下载站，但是版本通常不够新。</li>
<li><a href="https://www.weidown.com/bianchenggongju/11454.html">微当下载</a>：国内类似这样的软件网站很多，不过大多需要注册，而且有的还需要所谓会员才能下载，安全性难以保证。</li>
<li><a href="https://android-studio.updatestar.com/">updatestar</a>：一个国外的软件网站，类似于上一个，不过不需要注册。</li>
</ul>
<p>这里看各自选择了，个人比较推荐<code>Android Studio社区</code>，因为这个相对比较权威，也比较安全，但是不管是在哪儿下载的，一定要注意核对<code>MD5校验码</code></p>
<h2 id="安装android-studio">2. 安装Android Studio</h2>
<p>安装的过程就不再多说什么了，基本上就是一路下一步，这一步并不复杂。</p>
<h2 id="安装sdk">3. 安装SDK</h2>
<p>又到了一个坑，这个坑也是深不可测。在这里我刚开始想要使用所谓的国内镜像源来完成SDK的安装，这也是我搜到的第一种方法，但是发现这种方法现在已经根本没办法完成SDK的下载和安装了，于是我采用了下面这种方法<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>：</p>
<h3 id="第一步修改hosts">3.1. 第一步：修改hosts</h3>
<p>使用<a href="http://ping.chinaz.com/">ping工具</a>，找到<code>dl.google.com</code>的真实IP地址，并修改hosts文件，在hosts文件最后添加上相应的解析地址，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">180.163.150.33 dl.google.com</span><br></pre></td></tr></table></figure>
<h3 id="第二步配置android-studio启动配置">3.2. 第二步：配置Android Studio启动配置</h3>
<p>找到Android Studio的安装目录，进入<code>bin</code>目录，用编辑器打开<code>studio.exe.vmoptions</code>或<code>studio64.exe.vmoptions</code>文件。根据需要，如果是使用的32位系统，就修改<code>studio.exe.vmoptions</code>，如果使用的是64位系统，就修改<code>studio64.exe.vmoptions</code>。</p>
<p>在文件最后添加如下内容：</p>
<figure class="highlight text"><figcaption><span>studio64.exe.vmoptions</span></figcaption><table><tr><td class="code"><pre><span class="line">-Djava.net.preferIPv4Stack=true </span><br><span class="line">-Didea.updates.url=http://dl.google.com/android/studio/patches/updates.xml </span><br><span class="line">-Didea.patches.url=http://dl.google.com/android/studio/patches/</span><br></pre></td></tr></table></figure>
<h3 id="第三步关闭android-studio代理服务器">3.3. 第三步：关闭Android Studio代理服务器</h3>
<p>如果以前配置过任何代理服务器，将<code>HTTP Proxy</code>关闭</p>
<h3 id="第四步重启android-studio">3.4. 第四步：重启Android Studio</h3>
<p>注意，一定要看后台，将所有Android Studio相关的进程全部杀死，然后再重新打开Android Studio. 如果遇到配置代理的步骤，则直接取消，然后就可以体验丝滑地SDK下载过程了。</p>
<h2 id="安装构建工具gradle">4. 安装构建工具Gradle</h2>
<p>经历过以上步骤之后，我们终于能够成功打开Android Studio了，也终于能创建我们的第一个工程：HelloWorld了。但是你以为这就是结束了？不，这还远远不够。</p>
<p>我们又成功的遇到了另一个问题，整个项目创建后好像卡住了，左侧的项目列表中，迟迟不生成想要的目录结构，仔细一看，发现卡在下载<code>Gradle</code>的过程中，下载速度奇慢无比。来，让我们开始解决这个问题：</p>
<h3 id="第一步找到所需gradle版本">4.1. 第一步：找到所需Gradle版本</h3>
<p>取消Gradle的下载，关闭Android Studio，并且查看后台，千万不要留下任何相关进程。然后找到Gradle的安装路径，一般来说，Gradle的安装路径都是在用户目录下的<code>.gradle</code>目录中，Windows和Linux、MacOS都是这样。比如在Windows中，一般在<code>C:\Users\xxx\.gradle</code>。进入Gradle根目录下的<code>wrapper/dists</code>目录，可以看到一个类似<code>gradle-6.5-bin</code>目录，这里的6.5就是我们要的Gradle版本号。</p>
<h3 id="第二步下载gradle">4.2. 第二步：下载Gradle</h3>
<p>Gradle的下载网站国内并没有屏蔽，但是不知道为什么Android Studio下载速度那么慢，我们只需要上Gradle的<a href="https://gradle.org/">官方网站</a>，找到<a href="https://gradle.org/releases/">下载页面</a>，根据上一步中找到的Gradle版本号，下载对应的Gradle。</p>
<p>注意，对应版本有两个文件（<code>binary-only</code> or <code>complete</code>），如果刚才找到的目录是<code>gradle-x.x-bin</code>，就下载<code>binary-only</code>，如果是<code>gradle-x.x-all</code>，就下载<code>complete</code>。</p>
<h3 id="第三步安装gradle">4.3. 第三步：安装Gradle</h3>
<p>进入刚才的<code>gradle-x.x-bin</code>（或者是<code>gradle-x.x-all</code>）目录，有一个类似于一串乱码一样的目录，将刚才下载的文件直接放在这个乱码目录中，不需要解压，并将目录中原有的<code>*.lck</code>和<code>*.part</code>文件删掉。</p>
<p>重新打开Android Studio，等待项目构建即可。</p>
<h2 id="配置maven镜像源">5. 配置Maven镜像源</h2>
<p>Gradle在进行项目构建的时候，用的也是Maven源，但是Maven在国内使用的时候，经常比较卡，所以在这里我们对Maven源进行替换，替换为国内镜像源（<a href="https://developer.aliyun.com/mirror/maven?spm=a2c6h.13651102.0.0.3e221b11PdUBQg">阿里云镜像源</a>）<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>：</p>
<h3 id="对单个项目生效">5.1. 对单个项目生效</h3>
<p>1.打开Android Studio工程文件，找到build.gradle</p>
<p>2.使用文本编辑器打开，默认格式如下：</p>
<figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&#x27;com.android.tools.build:gradle:3.5.1&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>３.修改为以下内容：</p>
<figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&#x27;com.android.tools.build:gradle:3.5.1&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对所有项目生效">5.2. 对所有项目生效</h3>
<p>1.打开系统用户的Gradle配置目录：<code>C:\Users\xxx\.gradle</code></p>
<p>2.新建文件init.gradle（注意文件后缀名为gradle）</p>
<figure class="highlight gradle"><figcaption><span>init.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">allprojects</span>&#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="keyword">def</span> ALIYUN_REPOSITORY_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_JCENTER_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span></span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            <span class="keyword">if</span> (repo <span class="keyword">instanceof</span> MavenArtifactRepository)&#123;</span><br><span class="line">                <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo1.maven.org/maven2&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">project</span>.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://jcenter.bintray.com/&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">project</span>.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url ALIYUN_REPOSITORY_URL</span><br><span class="line">            url ALIYUN_JCENTER_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最后的话">6. 最后的话</h2>
<p>说句实在话，作为一个程序员，翻墙真的是基础技能，不能翻墙的话，大量的最新资讯、技术都无法第一时间获得，很多工具的使用也会变得很繁琐。希望大家能够学会如何翻墙，当然，前提是基于学习和技术研究，而不要用于一些非法的活动。总结这篇文章也是因为我的学生们很多并不知道如何翻墙，所以总结了这么一篇文章，希望能够对大家也有所帮助。</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://www.jb51.net/article/200127.htm">Android Studio配置国内镜像源（利用hosts）</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a href="https://www.rumosky.com/archives/295.html">Gradle/Maven配置国内镜像源（以Android Studio为例）</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>镜像源</tag>
        <tag>Android Studio</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>lilypond配置</title>
    <url>/2020/08/12/lilypond-configure/</url>
    <content><![CDATA[<p>摘要：编写本文的起因是因为随着macOS更新到新版本10.15 Catalina，macOS不再支持32位软件，原来安装的lilypond不能再用，只能安装64位版本的lilypond，但是更新软件后，发现原有的乐谱内有中文的，都无法再成功编译，在查找原因的过程中走了很多弯路，在此做一下记录，顺便将lilypond的一些相关配置都记录一下。</p>
<a id="more"></a>
<h2 id="配置命令行启动lilypond">1. 配置命令行启动lilypond</h2>
<p>正常情况下，安装完lilypond，虽然能够使用Frescobaldi之类的软件调用lilypon，但是直接在shell中用命令行调用lilypond是无法正常使用的。但是最近在处理lilypond出现的各种问题的时候，发现这样很不方便，因此根据官网的一些<a href="http://lilypond.org/macos-x.zh.html">提示</a>，配置命令行启用lilypond。</p>
<h3 id="创建执行脚本">1.1. 创建执行脚本</h3>
<p>在<code>/usr/local/bin</code>目录里创建文件<code>lilypond</code>并输入以下内容</p>
<p><figure class="highlight bash"><figcaption><span>/usr/local/bin/lilypond</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">exec</span> /Applications/LilyPond.app/Contents/Resources/bin/lilypond <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure> 除了<code>lilypond</code>，还有<code>lilypond-book</code>等命令，可以参照这一步骤，依次创建。</p>
<h3 id="添加权限">1.2. 添加权限</h3>
<p>为上一步中创建的执行脚本添加可执行权限</p>
<p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo chmod 755 lilypond</span><br></pre></td></tr></table></figure> 同样，为其他<code>lilypond</code>相关的可执行脚本创建可执行权限。</p>
<h2 id="lilypond中文乱码">2. lilypond中文乱码</h2>
<blockquote>
<p>在执行lilypond编译乐谱的时候，发现在生成pdf的步骤，会出现错误，无法正确识别中文。这应该是由于中文字体缺失导致的，</p>
</blockquote>
<p>编译过程出现的错误信息如下：</p>
<p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Converting to `玩够了没有.pdf&#x27;...</span><br><span class="line">warning: `(gs -q -dSAFER -dDEVICEWIDTHPOINTS=595.28 -dDEVICEHEIGHTPOINTS=841.89 -dCompatibilityLevel=1.4 -dNOPAUSE -dBATCH -r1200 -sDEVICE=pdfwrite -dAutoRotatePages=/None -dPrinted=false -sOutputFile=玩够了没有.pdf -c.setpdfwrite -f/var/folders/3p/zr3fwznx0pq01hp6c6p1tscr0000gp/T//lilypond-7gvJNc)&#x27; failed (256)</span><br></pre></td></tr></table></figure> 该问题暂时没有找到彻底的解决方案，只能通过一个曲线救国的方法来解决，即，在编译之前，将文件名改为英文，在编译之后再把文件改回原名。考虑到使用方便，在这里做了一个启动脚本，可以完成这个过程。</p>
<p><figure class="highlight bash"><figcaption><span>lilypond启动脚本</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ARGS_ARRAY=(<span class="string">&quot;<span class="variable">$@</span>&quot;</span>) <span class="comment"># 获取参数列表</span></span><br><span class="line"><span class="built_in">unset</span> <span class="string">&quot;ARGS_ARRAY[<span class="variable">$&#123;#ARGS_ARRAY[@]&#125;</span>-1]&quot;</span> <span class="comment"># 删除最后一个参数，即文件名</span></span><br><span class="line">FILE_PATH=<span class="variable">$&#123;!#&#125;</span> <span class="comment"># 获取最后一个参数，即文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将参数列表转换为字符串</span></span><br><span class="line">ARGS=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;ARGS_ARRAY[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">  ARGS=<span class="string">&quot;<span class="variable">$ARGS</span> <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否存在，不存在给出提示</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$FILE_PATH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;[ERROR] File not exists&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成临时文件</span></span><br><span class="line">BASEDIR=$(dirname <span class="variable">$FILE_PATH</span>)</span><br><span class="line">FULL_FILE_NAME=$(basename <span class="variable">$FILE_PATH</span>)</span><br><span class="line">SUFFIX=<span class="variable">$&#123;FULL_FILE_NAME#*.&#125;</span></span><br><span class="line">BASE_FILE_NAME=<span class="variable">$&#123;FULL_FILE_NAME%%.*&#125;</span></span><br><span class="line"></span><br><span class="line">TMP_FILE_NAME=$(<span class="built_in">echo</span> -n <span class="variable">$BASE_FILE_NAME</span> | md5sum| awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">TMP_FILE_PATH=<span class="variable">$BASEDIR</span>/<span class="variable">$TMP_FILE_NAME</span>.<span class="variable">$SUFFIX</span></span><br><span class="line"></span><br><span class="line">mv <span class="variable">$FILE_PATH</span> <span class="variable">$TMP_FILE_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这里插入调用lilypond的语句</span></span><br><span class="line">output=`<span class="built_in">exec</span> /Applications/LilyPond.app/Contents/Resources/bin/lilypond <span class="variable">$ARGS</span> <span class="variable">$TMP_FILE_PATH</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> FILE <span class="keyword">in</span> $(ls <span class="variable">$BASEDIR</span> | grep <span class="variable">$TMP_FILE_NAME</span>); <span class="keyword">do</span></span><br><span class="line">  TMP_SUFFIX=<span class="variable">$&#123;FILE#*.&#125;</span></span><br><span class="line">  SRC=<span class="variable">$BASEDIR</span>/<span class="variable">$TMP_FILE_NAME</span>.<span class="variable">$TMP_SUFFIX</span></span><br><span class="line">  TAR=<span class="variable">$BASEDIR</span>/<span class="variable">$BASE_FILE_NAME</span>.<span class="variable">$TMP_SUFFIX</span></span><br><span class="line">  mv <span class="variable">$SRC</span> <span class="variable">$TAR</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>lilypond</category>
      </categories>
      <tags>
        <tag>lilypond</tag>
        <tag>中文字体</tag>
        <tag>Catalina</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker安装MySQL</title>
    <url>/2020/08/23/install-mysql-in-docker/</url>
    <content><![CDATA[<p>摘要：本文讲解了如何在Docker中安装MySQL</p>
<a id="more"></a>
<h2 id="查看可用mysql可用版本">1. 查看可用MySQL可用版本</h2>
<p>Docker中<a href="https://hub.docker.com/_/mysql?tab=tags">MySQL镜像库</a>，如图：</p>
<figure>
<img src="https://rylee-home-pic.oss-cn-beijing.aliyuncs.com/install-mysql-in-docker-20200824180041818.png" alt="MySQL镜像库" /><figcaption aria-hidden="true">MySQL镜像库</figcaption>
</figure>
<p>此外，我们还可以使用<code>docker search mysql</code>命令来查看可用的版本：</p>
<figure class="highlight zsh"><figcaption><span>命令查看MySQL可用版本</span></figcaption><table><tr><td class="code"><pre><span class="line">❯ docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   9876                [OK]</span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3611                [OK]</span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   721                                     [OK]</span><br><span class="line">percona                           Percona Server is a fork of the MySQL relati…   503                 [OK]</span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   81</span><br><span class="line">mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   74</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="拉取mysql镜像">2. 拉取MySQL镜像</h2>
<p>这里我们拉取官方的最新版本的镜像，使用命令<code>docker pull mysql:latest</code>，其中<code>latest</code>表示最新版本镜像：</p>
<figure class="highlight zsh"><figcaption><span>拉取MySQL镜像</span></figcaption><table><tr><td class="code"><pre><span class="line">❯ docker pull mysql:latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">bf5952930446: Pull complete</span><br><span class="line">8254623a9871: Pull complete</span><br><span class="line">938e3e06dac4: Pull complete</span><br><span class="line">ea28ebf28884: Pull complete</span><br><span class="line">f3cef38785c2: Pull complete</span><br><span class="line">894f9792565a: Pull complete</span><br><span class="line">1d8a57523420: Pull complete</span><br><span class="line">6c676912929f: Pull complete</span><br><span class="line">ff39fdb566b4: Pull complete</span><br><span class="line">fff872988aba: Pull complete</span><br><span class="line">4d34e365ae68: Pull complete</span><br><span class="line">7886ee20621e: Pull complete</span><br><span class="line">Digest: sha256:c358e72e100ab493a0304bda35e6f239db2ec8c9bb836d8a427ac34307d074ed</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest</span><br></pre></td></tr></table></figure>
<h2 id="查看本地镜像">3. 查看本地镜像</h2>
<p>使用<code>docker image ls</code>命令来查看已经安装的本地镜像：</p>
<figure class="highlight zsh"><figcaption><span>查看本地镜像</span></figcaption><table><tr><td class="code"><pre><span class="line">❯ docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql               latest              0d64f46acfd1        2 weeks ago         544MB</span><br></pre></td></tr></table></figure>
<p>可以看到，第3行显示了我们安装好的mysql，TAG显示为<code>latest</code>。</p>
<h2 id="运行容器">4. 运行容器</h2>
<p>安装完成后，执行如下命令，运行容器：</p>
<figure class="highlight zsh"><figcaption><span>运行容器</span></figcaption><table><tr><td class="code"><pre><span class="line">❯ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line">07940f9545a3f7bbc0d5f22e1b2366cca3709b6851dbe466c5a09de9eaa3cba4</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><strong>-i:</strong> 以交互模式运行容器，通常与<code>-t</code>同时使用；</li>
<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与<code>-i</code>同时使用；</li>
<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>
<li><strong>--name mysql-test:</strong> 指定容器的名称；</li>
<li><strong>-p 3306:3306:</strong> 映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过<code>宿主机ip:3306</code>访问到 MySQL 的服务；</li>
<li><strong>-e MYSQL_ROOT_PASSWORD=123456:</strong> <code>-e</code>参数的作用是指定容器的环境变量，这里是指定<code>MYSQL_ROOT_PASSWORD=123456</code>，即指定 MySQL 的 root 密码是 <code>123456</code>；</li>
<li><strong>mysql:</strong> 最后的这个mysql即为要运行的镜像。</li>
</ul>
<h2 id="安装成功">5. 安装成功</h2>
<p>通过<code>docker ps</code>来查看是否成功运行容器：</p>
<figure class="highlight zsh"><figcaption><span>查看是否成功运行容器</span></figcaption><table><tr><td class="code"><pre><span class="line">❯ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">07940f9545a3        mysql               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   About an hour ago   Up About an hour    0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql-test</span><br></pre></td></tr></table></figure>
<p>在宿主机上通过<code>root</code>用户和密码<code>123456</code>访问MySQL服务：</p>
<ul>
<li>配置Navicat链接：</li>
</ul>
<figure>
<img src="https://rylee-home-pic.oss-cn-beijing.aliyuncs.com/install-mysql-in-docker-20200824181848138.png" alt="在Navicat中配置MySQL链接" /><figcaption aria-hidden="true">在Navicat中配置MySQL链接</figcaption>
</figure>
<ul>
<li>链接MySQL：</li>
</ul>
<figure>
<img src="https://rylee-home-pic.oss-cn-beijing.aliyuncs.com/install-mysql-in-docker-20200824182335787.png" alt="使用Navicat链接mysql" /><figcaption aria-hidden="true">使用Navicat链接mysql</figcaption>
</figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 系统配置</title>
    <url>/2020/12/12/macos-configure/</url>
    <content><![CDATA[<h2 id="摘要">0. 摘要</h2>
<p>本文记录了MacOS在使用过程中的常用配置</p>
<a id="more"></a>
<h2 id="homebrew-镜像源配置">1. Homebrew 镜像源配置</h2>
<p>在使用 Homebrew 的过程中，经常出现<code>brew update</code>十分缓慢的情况，以下是配置 Homebrew <a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华镜像源</a>的方法和过程。</p>
<h3 id="首次安装-homebrew">1.1. 首次安装 Homebrew</h3>
<p>首先，下载安装脚本的镜像（也可以直接从<a href="https://raw.githubusercontent.com/Homebrew/install/master/install.sh">官方下载</a>）：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git</span><br><span class="line"><span class="built_in">cd</span> install</span><br></pre></td></tr></table></figure>
<p>并编辑其中的<code>install.sh</code>：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">BREW_REPO=<span class="string">&quot;https://github.com/Homebrew/brew&quot;</span></span><br><span class="line"><span class="comment"># 改成：</span></span><br><span class="line">BREW_REPO=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span></span><br></pre></td></tr></table></figure>
<p>接着，运行<code>install.sh</code>以安装<code>Homebrew</code>：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">HOMEBREW_CORE_GIT_REMOTE=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git bash install.sh</span><br></pre></td></tr></table></figure>
<p>这样在首次安装的时候也可以使用镜像。</p>
<h3 id="替换现有上游">1.2. 替换现有上游</h3>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># brew 程序本身，Homebrew/Linuxbrew 相同</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下针对 mac OS 系统上的 Homebrew</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-fonts)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-drivers)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下针对 Linux 系统上的 Linuxbrew</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/linuxbrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换后测试工作是否正常</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure>
<h3 id="复原">1.3. 复原</h3>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># brew 程序本身，Homebrew/Linuxbrew 相同</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下针对 mac OS 系统上的 Homebrew</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-fonts)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask-fonts.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-drivers)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask-drivers.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下针对 Linux 系统上的 Linuxbrew</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/linuxbrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换后测试工作是否正常</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure>
<h2 id="zsh-配置">2. zsh 配置</h2>
<p>前段时间更新了以下macOS，更新之后发现打开终端之后，会有如下提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The default interactive shell is now zsh.</span><br><span class="line">To update your account to use zsh, please run `chsh -s /bin/zsh`.</span><br><span class="line">For more details, please visit https://support.apple.com/kb/HT208050.</span><br></pre></td></tr></table></figure>
<p>根据提示内容，新版本的终端会默认使用zsh替代以前的bash。本文就是记录一下zsh的配置过程。</p>
<blockquote>
<ul>
<li>本文内容均基于macOS 10.15 (Catalina)</li>
<li>zsh配置文件的路径为：<code>~/.zshrc</code></li>
</ul>
</blockquote>
<h3 id="安装">2.1. 安装</h3>
<p>macOS默认已经安装过zsh，以下为更新方法：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看zsh版本</span></span><br><span class="line">zsh --version</span><br><span class="line"><span class="comment"># 更新zsh</span></span><br><span class="line">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure>
<h3 id="使用oh-my-zsh">2.2. 使用oh my zsh</h3>
<p><code>oh my zsh</code>以下简称<code>omz</code></p>
<h4 id="安装-1">2.2.1. 安装</h4>
<p>安装<code>omz</code>可以使用<code>curl</code>或者<code>wget</code>，方法如下：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用curl</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用wget</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>安装完成后会自动生效，如果没有生效，可以重启shell。</p>
<h4 id="安装主题">2.2.2. 安装主题</h4>
<p>这里选择的主题是<code>powerlevel10k</code></p>
<h5 id="安装powerlevel10k">2.2.2.1. 安装powerlevel10k</h5>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>
<h5 id="更改-zsh-配置">2.2.2.2. 更改 zsh 配置</h5>
<p>修改zsh配置文件<code>~/.zshrc</code>，设置主题为<code>ZSH_THEME="powerlevel10k/powerlevel10k"</code></p>
<p>使用<code>p10k configure</code>命令，进行设置</p>
<h5 id="导入系统命令">2.2.2.3. 导入系统命令</h5>
<p>更新zsh之后，原有的命令可能无法使用，找到以前的<code>~/.bash_profile</code>文件，将其中的内容选择需要的粘贴在<code>~/.zshrc</code>中。</p>
<h5 id="vs-code中设置terminal">2.2.2.4. VS Code中设置Terminal</h5>
<p>打开VS Code的设置，修改配置</p>
<p><code>"terminal.integrated.shell.osx": "zsh"</code></p>
<h2 id="nvmnpmnode等相关镜像源设置">3. nvm、npm、node等相关镜像源设置</h2>
<h3 id="nvm-安装-node-速度过慢">3.1. nvm 安装 node 速度过慢</h3>
<p>考虑到安装node并不是经常要做的事情，所以只用设置一个临时变量，以方便安装node即可。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure>
<h3 id="npm-设置镜像源">3.2. npm 设置镜像源</h3>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3 id="yarn-安装">3.3. yarn 安装</h3>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure>
<h3 id="yarn-设置镜像源">3.4. yarn 设置镜像源</h3>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>系统配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown的一些用法</title>
    <url>/2019/03/14/markdown-usage/</url>
    <content><![CDATA[<p>摘要：记录了本人在使用markdown过程中遇到的一些小疑问</p>
<a id="more"></a>
<h2 id="换行">1. 换行</h2>
<ol type="1">
<li><p>使用<code>&lt;br/&gt;</code>标签</p></li>
<li><p>在末尾使用两个空格，然后回车</p></li>
</ol>
<h2 id="首行缩进">2. 首行缩进</h2>
<p>使用特殊占位符</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&amp;ensp; 或&amp;#8194; //半角</span><br><span class="line">&amp;emsp; 或&amp;#8195; //全角</span><br><span class="line">&amp;nbsp; 或&amp;#160;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意不要少了<code>;</code></p>
</blockquote>
<h2 id="自定义锚点">3. 自定义锚点</h2>
<blockquote>
<p>正常情况下，Markdown支持页内跳转，但是只支持针对标题的页内跳转，但是我们可以通过html标签的形式，自定义id，从而实现跳转到自定义锚点</p>
</blockquote>
<p>在需要锚点的地方添加如下代码</p>
<p><span id='test-id' /></p>
<figure class="highlight html"><figcaption><span>自定义锚点</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;test-id&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>在需要跳转的地方只需要参照Markdown页内跳转的基本用法即可，如：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[<span class="string">测试页内跳转</span>](<span class="link">#test-id</span>)</span><br></pre></td></tr></table></figure>
<p>实际效果： <a href="#test-id">测试页内跳转</a></p>
<h2 id="hexo-next主题中内建标签的使用">4. hexo next主题中内建标签的使用</h2>
<blockquote>
<p>本条目仅针对使用hexo搭建blog，且使用的是next主题情况下的内建标签的使用</p>
</blockquote>
<p>以下样式标签出现在<a href="https://codepen.io/superjaberwocky/pen/AXdEWj">Bootstrap Callout</a>说明中。</p>
<figure class="highlight text"><figcaption><span>在hexo文章中的使用方式</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% note class_name %&#125; 内容 &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>class_name</code>可以使用以下列表中的值：</p>
<ul>
<li>default</li>
<li>primary</li>
<li>success</li>
<li>info</li>
<li>warning</li>
<li>danger</li>
</ul>
<p>效果展示：</p>
<div class="note default">
            <p>Default Callout</p>
          </div>
<div class="note primary">
            <p>Primary Callout</p>
          </div>
<div class="note success">
            <p>Success Callout</p>
          </div>
<div class="note info">
            <p>Info Callout</p>
          </div>
<div class="note warning">
            <p>Warning Callout</p>
          </div>
<div class="note danger">
            <p>Danger Callout</p>
          </div>
<h2 id="内容折叠">5. 内容折叠</h2>
<figure class="highlight html"><figcaption><span>语法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>点击时的区域标题：点击查看详细内容<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - 测试 测试测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>title，value，callBack可以缺省<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>点击时的区域标题：点击查看详细内容<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ```</span><br><span class="line">    测试内容</span><br><span class="line">  ```</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>
<details>
<summary>
点击时的区域标题：点击查看详细内容
</summary>
<p>
<ul>
<li>测试 测试测试
</p>
<pre><code>title，value，callBack可以缺省</code></pre>
</details></li>
</ul>
<details>
<summary>
测试内容折叠
</summary>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;cn.hnpi.contentprovider&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;@string/app_name&quot;</span><br><span class="line">        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class="line">        &lt;provider</span><br><span class="line">            android:name=&quot;.MyContentProvider&quot;</span><br><span class="line">            android:authorities=&quot;cn.hnpi.contentprovider&quot;</span><br><span class="line">            android:enabled=&quot;true&quot;</span><br><span class="line">            android:exported=&quot;true&quot;&gt;<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<h2 id="引用文献">6. 引用文献</h2>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Here is a footnote reference,[^1] and another.[^longnote]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">Here is the footnote.</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">^longnote</span>]: <span class="link">Here&#x27;s one with multiple blocks.</span></span><br><span class="line"></span><br><span class="line"><span class="code">    Subsequent paragraphs are indented to show that they belong to the previous footnote.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">This paragraph won’t be part of the note, because it isn’t indented.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">Here is an inline note.^[Inlines notes are easier to write.</span></span><br><span class="line"><span class="code">Since you don&#x27;t have to pick an identifier and move down to type the note.]</span></span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<p>Here is a footnote reference,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> and another.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<p>This paragraph won’t be part of the note, because it isn’t indented.</p>
<p>Here is an inline note.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Here is the footnote.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Here's one with multiple blocks.</p>
<p>Subsequent paragraphs are indented to show that they belong to the previous footnote.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Inlines notes are easier to write. Since you don't have to pick an identifier and move down to type the note.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题的个性配置</title>
    <url>/2020/06/16/next-setting/</url>
    <content><![CDATA[<p>摘要：记录next中的一些个性设置，保证每次更新next主题都能够快速完成主题的个性化设置</p>
<a id="more"></a>
<h2 id="配置data_file">1. 配置data_file</h2>
<blockquote>
<p>data_file是hexo的一个特性，能够利用data_file，保存个性化的配置文件，不用再更改next的配置文件_config.yml，从而保证每次使用git pull都可以顺利拉取更新文件</p>
</blockquote>
<ol type="1">
<li><p>在<code>hexo/source/_data</code>目录下创建<code>next.yml</code>文件（如果没有_data目录，则手动创建即可）</p></li>
<li><p>将原本配置在主题配置文件<code>next/_config.yml</code>文件中的配置，拷贝到上一步创建的<code>next.yml</code>文件中</p></li>
<li><p>在<code>next.yml</code>文件中，有一个配置项：<code>override: false</code>，如果需要每次更新后，用<code>next.yml</code>完全替代主题配置文件<code>next/_config.yml</code>中的全部配置项，而不是合并配置项，那么可以改为将该配置改为<code>true</code></p></li>
</ol>
<blockquote>
<p>注意，部分模块的配置可能没法使用该方法，因为这些模块只会从hexo的config中读取配置，例如<code>hexo-server</code></p>
</blockquote>
<h2 id="自定义版权签名信息">2. 自定义版权签名信息</h2>
<ol type="1">
<li><p>创建版权信息模板：</p>
<p>在<code>next/layout/_partials/post</code>目录下创建<code>my-copyright.swig</code>文件，文件内容编辑如下：</p>
<p><figure class="highlight html"><figcaption><span>my-copyright.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post_my_copyright&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JS库 可修改路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; page.title &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;copy-path&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;点击复制文章链接&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clipboard&quot;</span> <span class="attr">data-clipboard-text</span>=<span class="string">&quot;&#123;&#123; page.permalink &#125;&#125;&quot;</span>  <span class="attr">aria-label</span>=<span class="string">&quot;复制成功！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-creative-commons&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;license&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&#x27;.fa-clipboard&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;.fa-clipboard&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    clipboard.on(<span class="string">&#x27;success&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        swal(&#123;</span><br><span class="line"><span class="javascript">        title: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        text: <span class="string">&#x27;复制成功&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        icon: <span class="string">&quot;success&quot;</span>,</span></span><br><span class="line"><span class="javascript">        showConfirmButton: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>配置版权信息模板的样式</p>
<p>在<code>next/source/css/_common/components/post</code>目录下创建<code>post-my-copyright.styl</code>文件，文件内容编辑如下：</p>
<p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post_my_copyright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span> <span class="selector-tag">p</span>&#123; <span class="attribute">margin</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a3d2a3</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">    +mobile()&#123; display:none; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post_my_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>配置<code>next/layout/_macro/post.swig</code>文件</p>
<p>找到文件内以下位置：</p>
<p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br></pre></td></tr></table></figure> 在该内容的下方，找到</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;%- if not is_index %&#125;</span><br></pre></td></tr></table></figure> 在该<code>if</code>片段内合适位置，添加：</p>
<p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;%- if page.copyright %&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/post/my-copyright.swig&#x27;) &#125;&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>导入版权信息样式配置：</p>
<p>在<code>next/source/css/_common/components/post/post.styl</code>文件末尾，添加<code>@import "post-my-copyright"</code></p></li>
</ol>
<h2 id="设置主题字体大小">3. 设置主题字体大小</h2>
<p>打开<code>next/source/css/_variables/base.styl</code>文件，找到<code>Font size</code>部分，修改字体大小：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$font-size-base           = (hexo-config(&#x27;font.enable&#x27;) and hexo-config(&#x27;font.global.size&#x27;) is a &#x27;unit&#x27;) ? unit(hexo-config(&#x27;font.global.size&#x27;), em) : 0.85em;</span><br><span class="line">$font-size-smallest       = .75em;</span><br><span class="line">$font-size-smaller        = .8125em;</span><br><span class="line">$font-size-small          = .875em;</span><br><span class="line">$font-size-medium         = 1em;</span><br><span class="line">$font-size-large          = 1.125em;</span><br><span class="line">$font-size-larger         = 1.25em;</span><br><span class="line">$font-size-largest        = 1.375em;</span><br></pre></td></tr></table></figure>
<h2 id="设置超链接格式">4. 设置超链接格式</h2>
<p>Hexo Next 主题默认的超链接格式为灰色带下划线，不太显眼，将其修改为蓝色。</p>
<p>在<code>./themes/next/source/css/_common/components/post/post.styl</code>文件下添加如下代码</p>
<figure class="highlight stylus"><figcaption><span>custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> a&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#428BCA</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">word-wrap</span>();</span><br><span class="line"></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#428BCA</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>选择<code>.post-body</code>是为了不影响标题，选择<code>p</code>是为了不影响首页“阅读全文”的显示样式</p>
<h2 id="取消折叠部分标题点击后出现的蓝色框体">5. 取消折叠部分标题点击后出现的蓝色框体</h2>
<p>在<code>./themes/next/source/css/_common/components/post/post.styl</code>文件下添加如下代码</p>
<figure class="highlight stylus"><figcaption><span>custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">details</span> summary&#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何在文章中插入jupyter-notebook">6. 如何在文章中插入Jupyter notebook</h2>
<p>先说明一下尚未解决的问题，看过后再来决定是否需要使用该功能：</p>
<ul>
<li>嵌入的 ipynb 所显示的最大高度有限，内容过多时不能根据嵌入内容自动变动，而是会产生滚动条，暂时没有找到解决方案</li>
<li><code>hexo</code>渲染的时间会加长</li>
</ul>
<p>如果看过以上问题，仍然选择继续折腾的，请往下看。</p>
<h3 id="安装hexo-jupyter-notebook插件">6.1 安装<code>hexo-jupyter-notebook</code>插件</h3>
<p>进入<code>hexo</code>根目录，安装以下两个插件：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">npm install hexo-jupyter-notebook --save</span><br><span class="line">npm install co</span><br></pre></td></tr></table></figure>
<p><code>co</code>是<code>hexo-jupyter-notebook</code>依赖项，必须安装。</p>
<h3 id="配置高度自适应">6.2 配置高度自适应</h3>
<h4 id="配置主题样式文件">6.2.1 配置主题样式文件</h4>
<p>找到<code>next</code>主题目录下的<code>source/css/_common/components/post/post.styl</code>文件，在文件最后添加如下内容：</p>
<figure class="highlight styl"><figcaption><span>post.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.auto-resizable-iframe</span> &#123;</span><br><span class="line">  <span class="comment">/*max-width: 540px;*/</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.auto-resizable-iframe</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.auto-resizable-iframe</span> <span class="selector-tag">iframe</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改hexo-jupyter-notebook插件的渲染模板">6.2.2 修改<code>hexo-jupyter-notebook</code>插件的渲染模板</h4>
<p>找到<code>hexo</code>目录下<code>hexo-jupyter-notebook</code>插件的安装位置，打开其中的<code>main.py</code>文件。将<code>iframe</code>标签嵌套放在两层<code>div</code>里，并将外层<code>div</code>的<code>class</code>设置为上一步中配置的格式<code>auto-resizable-iframe</code>。</p>
<figure class="highlight html"><figcaption><span>main.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;auto-resizable-iframe&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&#x27;ipynb&#x27;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&#x27;924px&#x27;</span> <span class="attr">srcdoc</span>=<span class="string">&quot;%s&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;scrolling:no;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="编写以及发布内嵌有ipynb的blog">6.3 编写以及发布内嵌有<code>ipynb</code>的blog</h3>
<h4 id="配置hexo自动创建资源目录">6.3.1 配置<code>hexo</code>自动创建资源目录</h4>
<p>找到<code>hexo</code>目录下的<code>_config.yml</code>文件，修改<code>post_asset_folder: false</code>值为<code>post_asset_folder: true</code> 这样一来，使用<code>hexo new</code>创建一篇blog的时候，就会在<code>_post</code>目录下生成一个与blog名称相同的资源目录，可以将准备嵌入blog中的<code>ipynb</code>文件放置在这个目录中。</p>
<h4 id="编写markdown">6.3.2 编写markdown</h4>
<p>在创建好的<code>markdown</code>文档中需要嵌入<code>ipynb</code>文件的地方，写下如下标签内容：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_jupyter /usr/local/bin/python3 test.ipynb %&#125;</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>/usr/local/bin/python3</code>是安装有<code>Jupyter notebook</code>解析器的<code>python</code>解释器所在位置。如果使用的是<code>anaconda</code>，通常是虚拟环境所在目录。 <code>test.ipynb</code>则是待嵌入的<code>ipynb</code>文件路径，这里是一个相对路径，即相对于自动创建的资源目录的路径。</p>
<h4 id="渲染生成blog">6.3.3 渲染生成blog</h4>
<p>在渲染生成的时候，发现有提示错误，找不到模板<code>full</code>，不知道是不是因为我python中的<code>nbconvert</code>模块安装在了<code>anaconda</code>的虚拟环境中了，导致在渲染的时候找不到<code>nbconvert</code>中的 模板文件，需要修改<code>hexo-jupyter-notebook</code>插件中的<code>main.py</code>文件。</p>
<figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#将这里的full模板换成classic，或者找到nbconvert模块安装位置下的模板文件，写绝对路径</span></span><br><span class="line">html_exporter.template_file = <span class="string">&#x27;classic&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>next</tag>
        <tag>data_file</tag>
        <tag>setting</tag>
      </tags>
  </entry>
  <entry>
    <title>python在控制台显示日志</title>
    <url>/2021/02/17/python-logging/</url>
    <content><![CDATA[<h2 id="摘要">0. 摘要</h2>
<p>在python中使用日志追踪执行过程，方便调试。</p>
<p>原文地址：<a href="https://www.cnblogs.com/yyds/p/6901864.html">Python之日志处理（logging模块）</a></p>
<p>这里只摘要部分自己用的内容。</p>
<a id="more"></a>
<h2 id="设置日志格式并调整显示级别">1. 设置日志格式并调整显示级别</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOG_FORMAT = <span class="string">&#x27;%(asctime)s - %(levelname)s - %(filename)s - line(%(lineno)d) - %(funcName)s() - %(message)s&#x27;</span></span><br><span class="line">DATE_FORMAT = <span class="string">&#x27;%m/%d/%Y %H:%M:%S&#x27;</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG, <span class="built_in">format</span>=LOG_FORMAT, datefmt=DATE_FORMAT)</span><br></pre></td></tr></table></figure>
<h2 id="logging模块定义的格式字符串字段">2. logging模块定义的格式字符串字段</h2>
<style type="text/css">
  table th:nth-of-type(1){
    width: 15%;
  }
  table th:nth-of-type(2){
    width: 20%;
  }
  table th:nth-of-type(3){
    width: 65%;
  }
</style>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">
字段/属性名称
</th>
<th style="text-align: center;">
使用格式
</th>
<th style="text-align: center;">
描述
</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">
asctime
</td>
<td style="text-align: right;">
%(asctime)s
</td>
<td style="text-align: left;">
日志事件发生的时间--人类可读时间，如：2003-07-08 16:49:45,896
</td>
</tr>
<tr class="even">
<td style="text-align: center;">
created
</td>
<td style="text-align: right;">
%(created)f
</td>
<td style="text-align: left;">
日志事件发生的时间--时间戳，就是当时调用time.time()函数返回的值
</td>
</tr>
<tr class="odd">
<td style="text-align: center;">
relativeCreated
</td>
<td style="text-align: right;">
%(relativeCreated)d
</td>
<td style="text-align: left;">
日志事件发生的时间相对于logging模块加载时间的相对毫秒数（目前还不知道干嘛用的）
</td>
</tr>
<tr class="even">
<td style="text-align: center;">
msecs
</td>
<td style="text-align: right;">
%(msecs)d
</td>
<td style="text-align: left;">
日志事件发生事件的毫秒部分
</td>
</tr>
<tr class="odd">
<td style="text-align: center;">
levelname
</td>
<td style="text-align: right;">
%(levelname)s
</td>
<td style="text-align: left;">
该日志记录的文字形式的日志级别（'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'）
</td>
</tr>
<tr class="even">
<td style="text-align: center;">
levelno
</td>
<td style="text-align: right;">
%(levelno)s
</td>
<td style="text-align: left;">
该日志记录的数字形式的日志级别（10, 20, 30, 40, 50）
</td>
</tr>
<tr class="odd">
<td style="text-align: center;">
name
</td>
<td style="text-align: right;">
%(name)s
</td>
<td style="text-align: left;">
所使用的日志器名称，默认是'root'，因为默认使用的是 rootLogger
</td>
</tr>
<tr class="even">
<td style="text-align: center;">
message
</td>
<td style="text-align: right;">
%(message)s
</td>
<td style="text-align: left;">
日志记录的文本内容，通过 msg % args计算得到的
</td>
</tr>
<tr class="odd">
<td style="text-align: center;">
pathname
</td>
<td style="text-align: right;">
%(pathname)s
</td>
<td style="text-align: left;">
调用日志记录函数的源码文件的全路径
</td>
</tr>
<tr class="even">
<td style="text-align: center;">
filename
</td>
<td style="text-align: right;">
%(filename)s
</td>
<td style="text-align: left;">
pathname的文件名部分，包含文件后缀
</td>
</tr>
<tr class="odd">
<td style="text-align: center;">
module
</td>
<td style="text-align: right;">
%(module)s
</td>
<td style="text-align: left;">
filename的名称部分，不包含后缀
</td>
</tr>
<tr class="even">
<td style="text-align: center;">
lineno
</td>
<td style="text-align: right;">
%(lineno)d
</td>
<td style="text-align: left;">
调用日志记录函数的源代码所在的行号
</td>
</tr>
<tr class="odd">
<td style="text-align: center;">
funcName
</td>
<td style="text-align: right;">
%(funcName)s
</td>
<td style="text-align: left;">
调用日志记录函数的函数名
</td>
</tr>
<tr class="even">
<td style="text-align: center;">
process
</td>
<td style="text-align: right;">
%(process)d
</td>
<td style="text-align: left;">
进程ID
</td>
</tr>
<tr class="odd">
<td style="text-align: center;">
processName
</td>
<td style="text-align: right;">
%(processName)s
</td>
<td style="text-align: left;">
进程名称，Python 3.1新增
</td>
</tr>
<tr class="even">
<td style="text-align: center;">
thread
</td>
<td style="text-align: right;">
%(thread)d
</td>
<td style="text-align: left;">
线程ID
</td>
</tr>
<tr class="odd">
<td style="text-align: center;">
threadName
</td>
<td style="text-align: right;">
%(thread)s
</td>
<td style="text-align: left;">
线程名称
</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>progressbar</tag>
      </tags>
  </entry>
  <entry>
    <title>python在命令行中显示执行进度条</title>
    <url>/2021/02/17/python-progressbar/</url>
    <content><![CDATA[<h2 id="摘要">0. 摘要</h2>
<p>在执行python程序的时候，有时执行时间比较长，因此希望能够有一个进度条来动态显示执行的进度。 这里使用python的第三方模块progressbar2来实现。</p>
<a id="more"></a>
<h2 id="安装progressbar2">1. 安装progressbar2</h2>
<p>使用<code>pip</code>执行安装：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">pip install progressbar2</span><br></pre></td></tr></table></figure>
<h2 id="用法">2. 用法</h2>
<h3 id="简单用法">2.1 简单用法</h3>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> progressbar</span><br><span class="line">p = progressbar.ProgressBar()</span><br><span class="line">N = <span class="number">1000</span></span><br><span class="line">p.start(N) <span class="comment"># 开始显示进度条，并设定进度条的最大值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    p.update(i+<span class="number">1</span>) <span class="comment"># 每执行一步，更新一次进度条</span></span><br><span class="line">p.finish() <span class="comment"># 执行完成，进度条走完</span></span><br></pre></td></tr></table></figure>
<p>显示结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">100% (1000 of 1000) |#####################| Elapsed Time: 0:00:10 Time: 0:00:10</span><br></pre></td></tr></table></figure>
<h3 id="自定义进度条格式">2.2 自定义进度条格式</h3>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> progressbar</span><br><span class="line">p = progressbar.ProgressBar()</span><br><span class="line">N = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">bar = progressbar.ProgressBar(widgets=[</span><br><span class="line">    <span class="string">&#x27; [&#x27;</span>, progressbar.Timer(), <span class="string">&#x27;] &#x27;</span>, <span class="comment"># 计时器</span></span><br><span class="line">    progressbar.Percentage(), <span class="comment"># 百分比进度</span></span><br><span class="line">    <span class="string">&#x27; (&#x27;</span>, progressbar.ETA(), <span class="string">&#x27;) &#x27;</span>, <span class="comment"># 预计剩余时间</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">p.start(N) <span class="comment"># 开始显示进度条，并设定进度条的最大值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    p.update(i+<span class="number">1</span>) <span class="comment"># 每执行一步，更新一次进度条</span></span><br><span class="line">p.finish() <span class="comment"># 执行完成，进度条走完</span></span><br></pre></td></tr></table></figure>
<p>显示结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[Elapsed Time: 0:00:10] 100% (Time: 0:00:10)</span><br></pre></td></tr></table></figure>
<p>常用的配置项属性有这么几种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Timer&#x27;</span>,          <span class="comment"># 计时器</span></span><br><span class="line"><span class="string">&#x27;ETA&#x27;</span>,            <span class="comment"># 预计剩余时间</span></span><br><span class="line"><span class="string">&#x27;AbsoluteETA&#x27;</span>,    <span class="comment"># 预计结束的绝对时间，耗时很长时使用较方便</span></span><br><span class="line"><span class="string">&#x27;Percentage&#x27;</span>,     <span class="comment"># 百分比进度，30%</span></span><br><span class="line"><span class="string">&#x27;SimpleProgress&#x27;</span>, <span class="comment"># 计数进度，300/1000</span></span><br><span class="line"><span class="string">&#x27;Counter&#x27;</span>,        <span class="comment"># 单纯计数</span></span><br><span class="line"><span class="string">&#x27;Bar&#x27;</span>             <span class="comment"># “#”号进度条</span></span><br></pre></td></tr></table></figure>
<p>例如，进度条设置为如下格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bar = progressbar.ProgressBar(widgets=[</span><br><span class="line">    progressbar.Percentage(), <span class="comment"># 百分比</span></span><br><span class="line">    <span class="string">&#x27; (&#x27;</span>, progressbar.SimpleProgress(), <span class="string">&#x27;) &#x27;</span>, <span class="comment"># 计数进度</span></span><br><span class="line">    <span class="string">&#x27; (&#x27;</span>, progressbar.AbsoluteETA(), <span class="string">&#x27;) &#x27;</span>,]) <span class="comment"># 预计结束的绝对时间</span></span><br></pre></td></tr></table></figure>
<p>显示结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">54% ( 545 of 1000) (Estimated finish time: 2016-11-06 19:26:15)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>progressbar</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch学习记录</title>
    <url>/2021/01/27/study-notes-pytorch/</url>
    <content><![CDATA[<h2 id="摘要">0. 摘要</h2>
<p>记录了一些学习PyTorch过程中遇见的问题</p>
<a id="more"></a>
<h2 id="使用torchvision下载资源过慢的问题">1. 使用<code>torchvision</code>下载资源过慢的问题</h2>
<p>对于初学PyTorch来说，torchvision模块是非常好用的，这个模块中包括了大量数据的下载、导入、解析等功能。</p>
<p>以Mnist为例，使用以下代码就可以轻松下载并解析Mnist数据库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_train = datasets.MNIST(root=DATA_PATH,</span><br><span class="line">                            transform=transform,</span><br><span class="line">                            train=<span class="literal">True</span>,</span><br><span class="line">                            download=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>但是在实际使用的过程中，发现这个下载过程极慢，甚至会卡死，而每次调用这部分代码都会重新下载，导致程序几乎无法执行。</p>
<p>解决方案其实也非常简单，使用下载工具，下载数据库，然后替换torchvision模块中的下载url即可。</p>
<p>找到torchvision模块安装路径下的<code>.../torchvison/datasets/mnist.py</code>文件，可以看到在<code>class MNIST</code>定义里有<code>resources</code>属性。</p>
<figure class="highlight python"><figcaption><span>.../torchvison/datasets/mnist.py</span></figcaption><table><tr><td class="code"><pre><span class="line">resources = [</span><br><span class="line">    (<span class="string">&quot;http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz&quot;</span>, <span class="string">&quot;f68b3c2dcbeaaa9fbdd348bbdeb94873&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz&quot;</span>, <span class="string">&quot;d53e105ee54ea40749a09fcbcd1e9432&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz&quot;</span>, <span class="string">&quot;9fb629c4189551a2d022fa330f9573f3&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz&quot;</span>, <span class="string">&quot;ec29112dd5afa0611ce80d1b7f02629c&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>我们打开这个网页，使用下载工具下载这4个压缩文件。然后，将上面的<code>resources</code>路径都修改为下载后文件的存储路径，例如：</p>
<figure class="highlight python"><figcaption><span>.../torchvison/datasets/mnist.py</span></figcaption><table><tr><td class="code"><pre><span class="line">resources = [</span><br><span class="line">    (<span class="string">&quot;file:///home/.../data_res/mnist/train-images-idx3-ubyte.gz&quot;</span>, <span class="string">&quot;f68b3c2dcbeaaa9fbdd348bbdeb94873&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;file:///home/.../data_res/mnist/train-labels-idx1-ubyte.gz&quot;</span>, <span class="string">&quot;d53e105ee54ea40749a09fcbcd1e9432&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;file:///home/.../data_res/mnist/t10k-images-idx3-ubyte.gz&quot;</span>, <span class="string">&quot;9fb629c4189551a2d022fa330f9573f3&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;file:///home/.../data_res/mnist/t10k-labels-idx1-ubyte.gz&quot;</span>, <span class="string">&quot;ec29112dd5afa0611ce80d1b7f02629c&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>人工智能</category>
        <category>PyTorch</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>人工智能</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow学习笔记 - 第一章 简介</title>
    <url>/2020/11/28/study-notes-tensorflow-lesson1/</url>
    <content><![CDATA[<h2 id="摘要">0. 摘要</h2>
<p>TensorFlow 学习笔记，第一章-摘要，主要记录了TensorFlow的环境配置</p>
<a id="more"></a>
<h2 id="tensorflow-在-macos系统上的安装">1. TensorFlow 在 MacOS系统上的安装</h2>
<h3 id="安装-anaconda">1.1. 安装 Anaconda</h3>
<p>官网下载安装，安装过程略</p>
<h3 id="配置-tensorflow-环境">1.2. 配置 TensorFlow 环境</h3>
<p>通过Anaconda图形界面或者终端配置虚拟环境，图形界面配置过程，按照界面操作即可，此处略。</p>
<ol type="1">
<li><code>conda create -n tensorflow python=3.8</code>创建名为<code>tensorflow</code>的虚拟环境</li>
<li><code>conda activate tensorflow</code>激活虚拟环境</li>
<li><code>python -m pip install --upgrade pip</code>将<code>pip</code>包列表更新到最新</li>
<li><code>pip install tensorflow</code>安装最新版tensorflow</li>
<li><code>python -m pip install matplotlib</code>安装python 2D绘图库</li>
</ol>
<div class="note info">
            <details><summary>pip安装包速度太慢解决方案：</summary><p>如果出现pip安装包速度太慢，可以将pip源设置为国内镜像源，例如<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">配置为清华源</a>：</p><p><strong>临时使用</strong></p><p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple some-package</span><br></pre></td></tr></table></figure>注意，<code>simple</code>不能少, 是<code>https</code>而不是<code>http</code></p><p><strong>设为默认</strong></p><p>升级<code>pip</code>到最新的版本<code>(&gt;=10.0.0)</code>后进行配置： <figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">pip install pip -U</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>如果您到<code>pip</code>默认源的网络连接较差，临时使用本镜像站来升级<code>pip</code>： <figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br></pre></td></tr></table></figure></p></details>
          </div>
<h3 id="测试环境">1.3. 测试环境</h3>
<p>在终端中激活1.2中创建的<code>tensorflow</code>虚拟环境，输入<code>python</code>，进入<code>python</code>交互式解释器。输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello = tf.constant(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">print(hello)</span><br></pre></td></tr></table></figure>
<p>如果显示如下内容，即表示配置完成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(<span class="string">b&#x27;Hello world!&#x27;</span>, shape=(), dtype=string)</span><br></pre></td></tr></table></figure>
<h3 id="spyder-安装">1.4. Spyder 安装</h3>
<p>打开<code>Anaconda</code>，在<code>Home</code>标签页下，选择<code>Applications on</code>为刚才创建的<code>tensorflow</code>虚拟环境，可以看到下方列表中有可用的IDE列表，已安装的显示<code>Launch</code>按钮，未安装的则显示为<code>Install</code>按钮，点击安装<code>Spyder</code>即可。 安装完成<code>Spyder</code>后，可以安装<code>Kite</code>作为自动补全工具，安装方法略。</p>
<h2 id="tensorflow-在-windows-系统上的安装">2. TensorFlow 在 Windows 系统上的安装</h2>
<p>待完成</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序使用component来制作自定义导航栏</title>
    <url>/2020/06/20/wechat-miniprogram-navigation-bar-by-component/</url>
    <content><![CDATA[<p>摘要：最近在制作微信小程序的时候，遇到了一个需求：希望能够根据用户角色不同，显示不同的导航栏。最初想到的方案，是利用component制作一个导航栏，然后在每个需要导航栏的page，引用这个component，</p>
]]></content>
      <categories>
        <category>wechat-miniprogram</category>
      </categories>
      <tags>
        <tag>wechat</tag>
        <tag>miniprogram</tag>
        <tag>component</tag>
      </tags>
  </entry>
  <entry>
    <title>更改源以更新不再支持的Ubuntu旧版本</title>
    <url>/2020/06/21/ubuntu-no-longer-supported/</url>
    <content><![CDATA[<p>摘要：今天更新Ubuntu的时候，发现无法通过<code>apt</code>更新，提示是该Ubuntu版本已经不再支持，然而更新版本也好，更新软件也好，都无法使用apt的话，也就无法更新到新的Ubuntu版本，进入了一个死循环</p>
<a id="more"></a>
<h2 id="原因">原因</h2>
<p>Ubuntu 对各个版本的技术支持时间是不同的，在<a href="https://ubuntu.com/about/release-cycle">Ubuntu Release生命周期</a>页面上，有近期常用Ubuntu版本的支持情况，比如： <a href="https://pic.downk.cc/item/5eeeefd914195aa5941cba06.jpg"><img src="https://pic.downk.cc/item/5eeeefd914195aa5941cba06.jpg" alt="Ubuntu Release生命周期" /></a> 对于已经不再支持的版本，会将其更新源统一转移至Old-Release中进行管理</p>
<h2 id="操作方法">操作方法</h2>
<p>编辑<code>/etc/apt/sources.list</code>文件 将<code>deb http://us.archive.ubuntu.com/ubuntu eoan-security main restricted</code>类似于这样的语句中的<code>us.archive</code>都修改为<code>old-releases</code>，修改后类似于：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://old-releases.ubuntu.com/ubuntu/ xxxx main restricted universe multiverse</span><br><span class="line">deb http://old-releases.ubuntu.com/ubuntu/ xxxx-security main restricted universe multiverse</span><br><span class="line">deb http://old-releases.ubuntu.com/ubuntu/ xxxx-updates main restricted universe multiverse</span><br><span class="line">deb http://old-releases.ubuntu.com/ubuntu/ xxxx-proposed main restricted universe multiverse</span><br><span class="line">deb http://old-releases.ubuntu.com/ubuntu/ xxxx-backports main restricted universe multiverse</span><br><span class="line">deb-src http://old-releases.ubuntu.com/ubuntu/ xxxx main restricted universe multiverse</span><br><span class="line">deb-src http://old-releases.ubuntu.com/ubuntu/ xxxx-security main restricted universe multiverse</span><br><span class="line">deb-src http://old-releases.ubuntu.com/ubuntu/ xxxx-updates main restricted universe multiverse</span><br><span class="line">deb-src http://old-releases.ubuntu.com/ubuntu/ xxxx-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://old-releases.ubuntu.com/ubuntu/ xxxx-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure> 其中xxxx部分，是各个Ubuntu版本的代号，可以使用命令<code>lsb_release -a</code>查看，例如：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@vultr:~# lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description: Ubuntu 19.10</span><br><span class="line">Release: 19.10</span><br><span class="line">Codename: eoan</span><br></pre></td></tr></table></figure> 这里的<code>eoan</code>，就是版本代号</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>source</tag>
        <tag>源更改</tag>
        <tag>no-longer-supported</tag>
        <tag>old-releases</tag>
        <tag>旧版本</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow学习笔记 - 第二章 基本数据结构及运算</title>
    <url>/2020/11/29/study-notes-tensorflow-lesson2/</url>
    <content><![CDATA[<h2 id="摘要">0. 摘要</h2>
<p>TensorFlow 学习笔记，第一章-基本数据结构及运算，主要记录了张量的基本知识、简单用法、随机数生成、张量的常用运算等</p>
<a id="more"></a>
<p>约定俗成，下文中使用<code>tf</code>缩写表示<code>TensorFlow</code>。 文章内容较多，对代码部分进行了折叠。</p>
<h2 id="张量的基本概念">1. 张量的基本概念</h2>
<h3 id="张量的简介">1.1. 张量的简介</h3>
<p>张量是具有统一类型（称为<code>dtype</code>）的多维数组。可以在<a href="https://www.tensorflow.org/api_docs/python/tf/dtypes/DType?hl=zh-cn">tf.dtypes.DType</a>中查看所有支持的<code>dtype</code>。 就像<code>Python</code>数值和字符串一样，所有张量都是不可变的：永远无法更新张量的内容，只能创建新的张量。</p>
<p>创建张量的基本语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.constant(</span><br><span class="line">    value, dtype=<span class="literal">None</span>, shape=<span class="literal">None</span>, name=<span class="string">&#x27;Const&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<div class="note info">
            <details><summary>参数中 name 的用法</summary><p><code>name</code>参数是可选的（可以创建带或不带它的变量和常量），并且在程序中使用的变量不依赖于它。 <code>name</code>在以下几个方面很有帮助：</p><p><strong>1. 想要保存或恢复变量时：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix_1 = tf.Variable([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>]], name=<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">matrix_2 = tf.Variable([[<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]], name=<span class="string">&quot;v2&quot;</span>)</span><br><span class="line">init = tf.initialize_all_variables()</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line">save_path = saver.save(sess, <span class="string">&quot;/model.ckpt&quot;</span>)</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><p>matrix_1和matrix_2保存的时候以v1和v2保存</p><p><strong>2. 在TensorBoard中使用name来很好地显示边的名称</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">&#x27;hidden&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">    a = tf.constant(<span class="number">5</span>, name=<span class="string">&#x27;alpha&#x27;</span>)</span><br><span class="line">    W = tf.Variable(tf.random_uniform([<span class="number">1</span>, <span class="number">2</span>], -<span class="number">1.0</span>, <span class="number">1.0</span>), name=<span class="string">&#x27;weights&#x27;</span>)</span><br><span class="line">    b = tf.Variable(tf.zeros([<span class="number">1</span>]), name=<span class="string">&#x27;biases&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以将Python命名空间和TensorFlow命名空间想象为两个平行线。 TensorFlow空间中的名称实际上是属于任何TensorFlow变量的“真实”属性，而Python空间中的名称只是在脚本运行期间指向TensorFlow变量的临时指针。 （也就是上面代码中的a, W, b都是在Python空间中定义的变量，而name参数定义的如alpha, weights, biases都是在TensorFlow空间中的）这就是为什么在保存和恢复变量时，只使用TensorFlow名称的原因，因为脚本终止后Python命名空间不再存在，但Tensorflow命名空间仍然存在于保存的文件中。</p></details>
          </div>
<h3 id="常见张量">1.2. 常见张量</h3>
<h4 id="标量">1.2.1. 标量</h4>
<p>数学意义上的标量，即“0 秩”张量，只包含单个值，没有“轴”。</p>
<details>
<summary>
<small>代码：创建一个标量</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This will be an int32 tensor by default; see &quot;dtypes&quot; below.</span></span><br><span class="line">rank_0_tensor = tf.constant(<span class="number">4</span>)</span><br><span class="line">print(rank_0_tensor)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(<span class="number">4</span>, shape=(), dtype=int32)</span><br></pre></td></tr></table></figure>
</details>
<h4 id="向量">1.2.2. 向量</h4>
<p>数学意义上的向量，即“1 秩”张量，有点类似一维数组。向量有 1 个轴。</p>
<details>
<summary>
<small>代码：创建一个向量</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Let&#x27;s make this a float tensor.</span></span><br><span class="line">rank_1_tensor = tf.constant([<span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>,])</span><br><span class="line">print(rank_1_tensor)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor([<span class="number">2.</span> <span class="number">3.</span> <span class="number">4.</span>], shape=(<span class="number">3</span>,), dtype=float32)</span><br></pre></td></tr></table></figure>
<p>注意观察<code>dtype</code>，变为了<code>float32</code>，原因是我们在这里将值设置为<code>2.0</code>，<code>3.0</code>，<code>4.0</code>，TensorFlow 默认设置的浮点数类型为<code>float32</code>类型。 同时，在显示时，显示的是<code>[2. 3. 4.]</code>，可以看到，小数点后的 0 被省略掉了。</p>
<p>我们可以在这个地方多试一下，比如，将<code>tf.constant([2.0, 3.0, 4.0,])</code>中的<code>4.0</code>修改为<code>4</code>，可以看到结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor([<span class="number">2.</span> <span class="number">3.</span> <span class="number">4.</span>], shape=(<span class="number">3</span>,), dtype=float32)</span><br></pre></td></tr></table></figure>
<p>可以看出来，在张量中，数据会被进行隐式的数据类型转换。</p>
<p>最后，对比一下构建张量时，赋值均为整数的情况：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor([<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>], shape=(<span class="number">3</span>,), dtype=int32)</span><br></pre></td></tr></table></figure>
</details>
<h4 id="矩阵">1.2.3. 矩阵</h4>
<p>数学意义上的矩阵，即“2 秩”张量，类似于二维数组。矩阵有 2 个轴。</p>
<details>
<summary>
<small>代码：创建一个矩阵</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If we want to be specific, we can set the dtype (see below) at creation time</span></span><br><span class="line">rank_2_tensor = tf.constant([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">                            [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">                            [<span class="number">5</span>, <span class="number">6</span>]], dtype=tf.float16)</span><br><span class="line">print(rank_2_tensor)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[<span class="number">1.</span> <span class="number">2.</span>]</span><br><span class="line">[<span class="number">3.</span> <span class="number">4.</span>]</span><br><span class="line">[<span class="number">5.</span> <span class="number">6.</span>]], shape=(<span class="number">3</span>, <span class="number">2</span>), dtype=float16)</span><br></pre></td></tr></table></figure>
这个案例里，我们在构建张量的时候，赋予的数值是<code>1</code>，<code>2</code>这样的整数，但是我们同时给出了数据类型的参数<code>dtype=tf.float16</code>，因此，在结果中出现了<code>1.</code>，<code>2.</code>这样的浮点数。
</details>
<h4 id="更高秩的张量">1.2.4. 更高秩的张量</h4>
<details>
<summary>
<small>代码：创建一个3秩张量</small>
</summary>
<p>张量的轴可以更多，例如，一个包含 3 个轴的张量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># There can be an arbitrary number of</span></span><br><span class="line"><span class="comment"># axes (sometimes called &quot;dimensions&quot;)</span></span><br><span class="line">rank_3_tensor = tf.constant([</span><br><span class="line">  [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]],</span><br><span class="line">  [[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">  [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]],</span><br><span class="line">  [[<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>],</span><br><span class="line">  [<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>]],])</span><br><span class="line"></span><br><span class="line">print(rank_3_tensor)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line">  [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line">  [<span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span>]</span><br><span class="line">  [<span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span>]]], shape=(<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>), dtype=int32)</span><br></pre></td></tr></table></figure>
</details>
<h4 id="张量的初始化">1.2.5. 张量的初始化</h4>
<p>以上几个案例都是采用给出张量中每个元素具体值的方式进行初始化，这适用于张量元素个数不多，张量数量不多，且张量中元素没有什么规律的情况。 但是我们在实际问题中，遇到更多的是张量数量、张量元素数量很多，但是张量中元素的值相对比较规律的情况，这种情况下，我们就可以考虑使用一些特殊的方法进行初始化。</p>
<h5 id="创建一个元素全部为-0-的张量">1. 创建一个元素全部为 0 的张量</h5>
<details>
<summary>
<small>代码：创建一个尺寸为[2,3,4],元素值都为 0 的张量</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个尺寸为[2,3,4],元素值都为0的张量</span></span><br><span class="line">t = tf.zeros([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],dtype=tf.float32)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]], shape=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=float32)</span><br></pre></td></tr></table></figure>
</details>
<h5 id="创建一个元素全部为-1-的张量">2. 创建一个元素全部为 1 的张量</h5>
<details>
<summary>
<small>代码：创建一个尺寸为[2,3,4],元素值都为 1 的张量</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个尺寸为[2,3,4],元素值都为1的张量</span></span><br><span class="line">t = tf.ones([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],dtype=tf.float32)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]], shape=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=float32)</span><br></pre></td></tr></table></figure>
</details>
<h5 id="创建一个元素全部为-9-的张量">3. 创建一个元素全部为 9 的张量</h5>
<details>
<summary>
<small>代码：创建一个尺寸为[2,3,4],元素值都为9.0的张量</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个尺寸为[2,3,4],元素值都为9.0的张量</span></span><br><span class="line">t = tf.fill([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">9.0</span>)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[[<span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span>]</span><br><span class="line">  [<span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span>]</span><br><span class="line">  [<span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span>]</span><br><span class="line">  [<span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span>]</span><br><span class="line">  [<span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span> <span class="number">9.</span>]]], shape=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=float32)</span><br></pre></td></tr></table></figure>
</details>
<h5 id="创建一个与给定张量形状相同但是元素全为-0-的张量">4. 创建一个与给定张量形状相同，但是元素全为 0 的张量</h5>
<details>
<summary>
<small>代码：创建一个尺寸和给定张量相同,元素值都为0的张量</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个尺寸和给定张量相同,元素值都为0的张量</span></span><br><span class="line">t = tf.fill([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">9.0</span>)</span><br><span class="line"></span><br><span class="line">t1 = tf.zeros_like(t)</span><br><span class="line">print(t1)</span><br><span class="line">t2 = tf.zeros(t.shape)</span><br><span class="line">print(t2)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]], shape=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=float32)</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">  [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]], shape=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=float32)</span><br></pre></td></tr></table></figure>
</details>
<h5 id="创建一个与给定张量形状相同但是元素全为-1-的张量">5. 创建一个与给定张量形状相同，但是元素全为 1 的张量</h5>
<details>
<summary>
<small>代码：创建一个尺寸和给定张量相同,元素值都为 1 的张量</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个尺寸和给定张量相同,元素值都为 1 的张量</span></span><br><span class="line">t = tf.fill([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">9.0</span>)</span><br><span class="line"></span><br><span class="line">t1 = tf.ones_like(t)</span><br><span class="line">print(t1)</span><br><span class="line">t2 = tf.ones(t.shape)</span><br><span class="line">print(t2)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]], shape=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=float32)</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]], shape=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype=float32)</span><br></pre></td></tr></table></figure>
</details>
<h3 id="张量的形状">1.3. 张量的形状</h3>
<p>张量有形状，下面是几个关于张量形状的术语：</p>
<ul>
<li><strong>形状：</strong>张量的每个维度的长度（元素数量）。</li>
<li><strong>秩：</strong>张量的维度数量。标量的秩为 0，向量的秩为 1，矩阵的秩为 2。</li>
<li><strong>轴或维度：</strong>张量的一个特殊维度。</li>
<li><strong>大小：</strong>张量的总项数，即乘积形状向量</li>
</ul>
<blockquote>
<p>注：虽然您可能会看到“二维张量”之类的表述，但 2 秩张量通常并不是用来描述二维空间。</p>
</blockquote>
<p>张量和<a href="https://www.tensorflow.org/api_docs/python/tf/TensorShape">tf.TensorShape</a>对象提供了方便的属性来访问：</p>
<details>
<summary>
<small>代码：张量的形状</small>
</summary>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = tf.zeros([<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(<span class="string">&quot;Type of every element:&quot;</span>, t.dtype)</span><br><span class="line">print(<span class="string">&quot;Number of dimensions:&quot;</span>, t.ndim)</span><br><span class="line">print(<span class="string">&quot;Shape of tensor:&quot;</span>, t.shape)</span><br><span class="line">print(<span class="string">&quot;Elements along axis 0 of tensor:&quot;</span>, t.shape[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">&quot;Elements along the last axis of tensor:&quot;</span>, t.shape[-<span class="number">1</span>])</span><br><span class="line">print(<span class="string">&quot;Total number of elements (3*2*4*5): &quot;</span>, tf.size(t).numpy())</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Type of every element: &lt;dtype: <span class="string">&#x27;float32&#x27;</span>&gt;</span><br><span class="line">Number of dimensions: <span class="number">4</span></span><br><span class="line">Shape of tensor: (<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">Elements along axis <span class="number">0</span> of tensor: <span class="number">3</span></span><br><span class="line">Elements along the last axis of tensor: <span class="number">5</span></span><br><span class="line">Total number of elements (<span class="number">3</span>*<span class="number">2</span>*<span class="number">4</span>*<span class="number">5</span>):  <span class="number">120</span></span><br></pre></td></tr></table></figure>
</details>
<p>虽然通常用索引来指代轴，但是您始终要记住每个轴的含义。轴一般按照从全局到局部的顺序进行排序：首先是批次轴，随后是空间维度，最后是每个位置的特征。这样，在内存中，特征向量就会位于连续的区域。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">  Width-| |-Height</span><br><span class="line">Batch-↓ ↓ ↓ ↓-Features</span><br><span class="line">      3 2 4 5</span><br><span class="line">     |-|-|-|-|</span><br><span class="line">       Rank 4</span><br></pre></td></tr></table></figure>
<h2 id="张量的操作">2. 张量的操作</h2>
<h3 id="张量与-numpy-数组的转换">2.1. 张量与 NumPy 数组的转换</h3>
<p>通过使用<code>np.array</code>或<code>tensor.numpy</code>方法，可以将张量转换为<code>NumPy</code>数组。 <code>NumPy</code>是<code>Python</code>中一种数值计算扩展，主要用于存储和处理多维数组，其核心数据结构为<code>ndarray</code>。</p>
<h4 id="张量转换为-ndarray">2.1.1 张量转换为 ndarray</h4>
<p>使用<code>tensor.numpy()</code>方法和<code>np.array()</code>方法均可以将张量转换为<code>ndarray</code>。</p>
<details>
<summary>
<small>代码：张量转换为 ndarray</small>
</summary>
<figure class="highlight python"><figcaption><span>TensorToArray.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入tensorflow库</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 构建四维张量</span></span><br><span class="line">temp = tf.constant(</span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">              [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]],</span><br><span class="line">              [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]]</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">              [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]],</span><br><span class="line">              [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]]</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        dtype=tf.float32</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;--------------------使用tensor.numpy()方法----------------\n&quot;</span>)</span><br><span class="line"><span class="comment"># 将张量转化为 ndarray</span></span><br><span class="line">arr1=temp.numpy()</span><br><span class="line"><span class="comment"># 打印 ndarray</span></span><br><span class="line">print(arr1)</span><br><span class="line"><span class="comment"># 打印 array 类型</span></span><br><span class="line">print(<span class="built_in">type</span>(arr1))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;\n----------------------使用np.array()方法------------------\n&quot;</span>)</span><br><span class="line"><span class="comment"># 将张量转化为 ndarray</span></span><br><span class="line">arr2 = np.array(temp)</span><br><span class="line"><span class="comment"># 打印 ndarray</span></span><br><span class="line">print(arr2)</span><br><span class="line"><span class="comment"># 打印 arr 类型</span></span><br><span class="line">print(<span class="built_in">type</span>(arr2))</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">--------------------使用tensor.numpy()方法----------------</span><br><span class="line"></span><br><span class="line">[[[[ <span class="number">3.</span>  <span class="number">4.</span>  <span class="number">5.</span> -<span class="number">2.</span>]</span><br><span class="line">  [ <span class="number">3.</span>  <span class="number">4.</span>  <span class="number">5.</span> -<span class="number">2.</span>]]</span><br><span class="line"></span><br><span class="line">  [[ <span class="number">3.</span>  <span class="number">4.</span>  <span class="number">5.</span> -<span class="number">2.</span>]</span><br><span class="line">  [ <span class="number">3.</span>  <span class="number">4.</span>  <span class="number">5.</span> -<span class="number">2.</span>]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[[ <span class="number">3.</span>  <span class="number">4.</span>  <span class="number">5.</span> -<span class="number">2.</span>]</span><br><span class="line">  [ <span class="number">3.</span>  <span class="number">4.</span>  <span class="number">5.</span> -<span class="number">2.</span>]]</span><br><span class="line"></span><br><span class="line">  [[ <span class="number">3.</span>  <span class="number">4.</span>  <span class="number">5.</span> -<span class="number">2.</span>]</span><br><span class="line">  [ <span class="number">3.</span>  <span class="number">4.</span>  <span class="number">5.</span> -<span class="number">2.</span>]]]]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">numpy</span>.<span class="title">ndarray</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">----------------------使用<span class="title">np</span>.<span class="title">array</span>()方法------------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">[[[[ 3.  4.  5. -2.]</span></span><br><span class="line"><span class="class">  [ 3.  4.  5. -2.]]</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  [[ 3.  4.  5. -2.]</span></span><br><span class="line"><span class="class">  [ 3.  4.  5. -2.]]]</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">[[[ 3.  4.  5. -2.]</span></span><br><span class="line"><span class="class">  [ 3.  4.  5. -2.]]</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  [[ 3.  4.  5. -2.]</span></span><br><span class="line"><span class="class">  [ 3.  4.  5. -2.]]]]</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">numpy</span>.<span class="title">ndarray</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
</details>
<h4 id="ndarray-转换为张量">2.1.2. ndarray 转换为张量</h4>
<p>在将<code>ndarray</code>转换为张量时，我们使用<a href="https://www.tensorflow.org/api_docs/python/tf/convert_to_tensor">tf.convert_to_tensor</a>方法。 其实，<code>tf.convert_to_tensor</code>不仅可以用于转换<code>ndarray</code>类型的数据，也可以用于转换出现在转换注册表中的任意对象。官方提供了大部分常用对象，例如： <code>NumPy</code>的<code>ndarray</code>、<code>TensorShape</code>、<code>Python列表</code>和<code>tf.Variable</code>，也可以根据需要注册自己的转换方法，详情参阅<a href="https://www.tensorflow.org/api_docs/python/tf/register_tensor_conversion_function">tf.register_tensor_conversion_function</a>。</p>
<p><code>tf.convert_to_tensor</code>语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.convert_to_tensor(</span><br><span class="line">    value, dtype=<span class="literal">None</span>, dtype_hint=<span class="literal">None</span>, name=<span class="literal">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<details>
<summary>
<small>ndarray 转换为张量</small>
</summary>
<figure class="highlight python"><figcaption><span>ArrayToTensor.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入tensorflow库</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 引入numpy库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 构建一个二维数组</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]], np.float32)</span><br><span class="line"><span class="comment"># 将二维数组转换为张量</span></span><br><span class="line">t = tf.convert_to_tensor(array, tf.float32)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]</span><br><span class="line">[<span class="number">4.</span> <span class="number">5.</span> <span class="number">6.</span>]], shape=(<span class="number">2</span>, <span class="number">3</span>), dtype=float32)</span><br></pre></td></tr></table></figure>
</details>
<h3 id="获取张量尺寸">2.2. 获取张量尺寸</h3>
<h4 id="使用tf.shape获取张量尺寸">2.2.1. 使用<code>tf.shape()</code>获取张量尺寸</h4>
<p>使用<code>tf.shape()</code>获取张量尺寸，得到的也是一个张量，是一个向量。</p>
<details>
<summary>
<small>代码：使用<code>tf.shape()</code>获取张量尺寸</small>
</summary>
<figure class="highlight python"><figcaption><span>TensorSizeShape.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入tensorflow库</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 引入numpy库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 构建一个四维张量</span></span><br><span class="line">t = tf.constant(</span><br><span class="line">          [</span><br><span class="line">              [</span><br><span class="line">                [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]],</span><br><span class="line">                [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]]</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]],</span><br><span class="line">                [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]]</span><br><span class="line">              ],</span><br><span class="line">          ],</span><br><span class="line">          tf.float32</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 获取张量的尺寸（尺寸也是用一个张量表示）</span></span><br><span class="line">shape = tf.shape(t)  </span><br><span class="line"><span class="comment"># 打印张量尺寸</span></span><br><span class="line">print(shape)</span><br><span class="line"><span class="comment"># 打印尺寸张量的类型</span></span><br><span class="line">print(<span class="built_in">type</span>(shape))</span><br><span class="line"><span class="comment"># 打印尺寸张量</span></span><br><span class="line">print(shape)</span><br><span class="line"><span class="comment"># 转换为ndarray</span></span><br><span class="line">infoArray = shape.numpy()</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line">print(infoArray)</span><br><span class="line"><span class="comment"># 注意可以使用负数索引（-1代表倒数第一个元素）</span></span><br><span class="line">print(infoArray[-<span class="number">1</span>])</span><br><span class="line">print(infoArray[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tensorflow</span>.<span class="title">python</span>.<span class="title">framework</span>.<span class="title">ops</span>.<span class="title">EagerTensor</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">Tensor</span>(<span class="params">[<span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span>], shape=(<span class="params"><span class="number">4</span>,</span>), dtype=int32</span>)</span></span><br><span class="line"><span class="class">[2 2 2 4]</span></span><br><span class="line"><span class="class">4</span></span><br><span class="line"><span class="class">4</span></span><br></pre></td></tr></table></figure>
</details>
<h4 id="使用成员方法tensor.get_shape获取张量尺寸">2.2.2. 使用成员方法<code>tensor.get_shape()</code>获取张量尺寸</h4>
<p>使用成员方法<code>tensor.get_shape()</code>获取到的张量尺寸不是一个张量。</p>
<details>
<summary>
<small>代码：使用成员方法<code>tensor.get_shape()</code>获取张量尺寸</small>
</summary>
<figure class="highlight python"><figcaption><span>TensorSizeGetShape.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入tensorflow库</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 构建一个四维张量</span></span><br><span class="line">t=tf.constant(</span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">              [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]],</span><br><span class="line">              [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]]</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">              [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]],</span><br><span class="line">              [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,-<span class="number">2</span>]]</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        tf.float32</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 通过成员方法获取张量的尺寸</span></span><br><span class="line">size = t.get_shape()</span><br><span class="line"><span class="comment"># 打印张量尺寸</span></span><br><span class="line">print(size)</span><br><span class="line"><span class="comment"># 张量尺寸的类型(注意这种方法获取的张量尺寸类型不是张量)</span></span><br><span class="line">print(<span class="built_in">type</span>(size));</span><br><span class="line"><span class="comment"># 张量尺寸的值</span></span><br><span class="line">print(size);</span><br><span class="line"><span class="comment"># 将张量尺寸转换为python的list类型</span></span><br><span class="line">infoList=size.as_list()</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line">print(infoList)</span><br><span class="line">print(infoList[<span class="number">0</span>])</span><br><span class="line">print(infoList[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tensorflow</span>.<span class="title">python</span>.<span class="title">framework</span>.<span class="title">tensor_shape</span>.<span class="title">TensorShape</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">(<span class="params"><span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span></span>)</span></span><br><span class="line">[2, 2, 2, 4]</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</details>
<h3 id="将图像转换为张量">2.3. 将图像转换为张量</h3>
<p>实际开发中，经常需要将图像转化为张量，再进行计算处理。这里给出一个加载图像，并转换为张量的案例：</p>
<details>
<summary>
<small>代码：加载图像并转换为张量</small>
</summary>
<figure class="highlight python"><figcaption><span>LoadJpg.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入tensorflow库</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 引入matplotlib.pyplot库</span></span><br><span class="line"><span class="comment"># matplotlib.pyplot是python下的一个常用数据可视化工具包</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 读取图像文件</span></span><br><span class="line">img_raw = tf.io.read_file(<span class="string">&quot;tflogo.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 将图像文件解码为张量</span></span><br><span class="line">img_tensor = tf.image.decode_image(img_raw)</span><br><span class="line"><span class="comment"># 打印张量</span></span><br><span class="line">print(img_tensor)</span><br><span class="line">print(<span class="string">&quot;----------------------------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="comment"># 将张量转为numpy数组</span></span><br><span class="line">image_ndarray = img_tensor.numpy()</span><br><span class="line"><span class="comment"># 打印数组数据</span></span><br><span class="line">print(image_ndarray)</span><br><span class="line">print(<span class="string">&quot;----------------------------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line">plt.imshow(image_ndarray);</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
</details>
<h3 id="随机数生成">2.4. 随机数生成</h3>
<p><span class="math display">\[
  p(X=x)= \begin{cases}
    \frac{1}{b-a}, \\
    0, \text{others}\\
  \end{cases}
\]</span></p>
<p><span class="math display">\[ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. \]</span></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网-Trojan搭建指南</title>
    <url>/2020/06/21/trojan-config/</url>
    <content><![CDATA[<p>摘要：科学上网，在科学上网的高峰上默默攀登~<br />
本文介绍了如何使用Trojan进行科学上网，相较V2ray，Trojan具有更安全，更高速的特性，更符合国情</p>
<a id="more"></a>
<blockquote>
<p>已有域外服务器和域名的，并且完成DNS解析的，可以跳过1-3步骤，注意云服务器版本要在<code>Ubuntu 16.04</code> or <code>Debian 9</code> or <code>CentOS 7</code>及以上</p>
</blockquote>
<h2 id="购买服务器">1. 购买服务器</h2>
<p>过程略，大家可以根据各自需求，选择国外的服务器提供商，购买云服务器。我个人使用的是<a href="https://www.vultr.com/">Vultr</a>，因为Vultr提供的服务器是按小时收费的，可以在不用的时候关闭服务器，更加灵活弹性。而且Vultr提供的服务器，最便宜的有 $5/mon 的，非常划算。</p>
<h2 id="购买域名">2. 购买域名</h2>
<p>过程略，大家可以根据自己需求，选择国外的域名服务商，购买域名，不推荐国内的域名服务商。我个人使用的是<a href="https://www.namecheap.com/">namecheap</a>，也可以使用<a href="http://www.freenom.com">freenom</a>（特定几个域名后缀，比如ga，提供最长12个月的免费服务，而且可以在时间快要到期的时候继续延时）。不过我不使用freenom的原因是因为freenom的网页实在是太难连接了！！！namecheap购买的域名，最便宜可以到 $3.88/yr ，可以买10年，而且有些特价域名，可能不到 $1/yr。</p>
<h2 id="构建dns解析服务">3. 构建DNS解析服务</h2>
<p>使用<a href="https://www.cloudflare.com/">cloudflare</a>进行DNS解析，好处是可以进行IP伪装，掩盖云服务器的真实IP地址。</p>
<h3 id="注册cloudflare会员">3.1 注册cloudflare会员</h3>
<p>注册过程略</p>
<h3 id="添加站点">3.2 添加站点</h3>
<p>注册之后，登录cloudflare，应该会显示如下页面： <a href="https://pic.downk.cc/item/5eeed99e14195aa594fdcf49.jpg"><img src="https://pic.downk.cc/item/5eeed99e14195aa594fdcf49.jpg" alt="cloudflare 用户控制面板" /></a> 点击添加站点，在输入框里填入刚才第二步中购买的域名，然后点击添加站点： <a href="https://pic.downk.cc/item/5eeedbb114195aa594007563.jpg"><img src="https://pic.downk.cc/item/5eeedbb114195aa594007563.jpg" alt="添加站点" /></a> 在名称那一栏填写路径，这里的路径就是域名前面的那一段，比如<code>www.baidu.com</code>这里的<code>www</code>，在IPv4地址那一栏填写刚才第一步购买的云服务器的IP地址，将小云朵点成灰色。然后点击添加记录，点击继续。 <a href="https://pic.downk.cc/item/5eeedeec14195aa59404ab07.jpg"><img src="https://pic.downk.cc/item/5eeedeec14195aa59404ab07.jpg" alt="添加DNS解析记录" /></a> &gt; 注意：这里我们通常添加两个解析，名称里一个是域名，一个是<code>www</code>，IPv4里都是云服务器的IP地址。另外，那个小云朵一定要点成灰色，不要橘色，否则会导致SSL错误，无法正常代理。</p>
<p>回到第二步的域名提供商的网站，在域名设置里，找到修改DNS，或者是修改nameserver的地方，将两个DNS服务器修改为下图中的<code>may.ns.cloudflare.com</code>和<code>roan.ns.cloudflare.com</code> <a href="https://pic.downk.cc/item/5eeedfeb14195aa59405e0c9.jpg"><img src="https://pic.downk.cc/item/5eeedfeb14195aa59405e0c9.jpg" alt="更改DNS服务器" /></a> 例如我所使用的namecheap，操作如下： <a href="https://pic.downk.cc/item/5eeee27914195aa594092220.jpg"><img src="https://pic.downk.cc/item/5eeee27914195aa594092220.jpg" alt="进入域名管理" /></a> <a href="https://pic.downk.cc/item/5eeee27914195aa594092224.jpg"><img src="https://pic.downk.cc/item/5eeee27914195aa594092224.jpg" alt="更改域名解析服务器" /></a></p>
<h2 id="vps服务器部署">4. VPS服务器部署</h2>
<blockquote>
<p>这里需要使用一个远程连接工具连接云服务器，推荐使用XShell，用法教程很多，这里不再介绍</p>
</blockquote>
<h3 id="创建用户账户">4.1 创建用户账户</h3>
<p>为了系统安全，一般不建议直接使用root用户对系统做设置，而vultr默认只有root用户，故可以自己新建一个非root但是有sudo权限的用户继续后面的操作，代码如下所示，请不要复制 <code>#</code> 及以后内容</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo useradd -m -s /bin/bash trojanuser <span class="comment"># 添加用户</span></span><br><span class="line">sudo passwd trojanuser <span class="comment"># 设置密码</span></span><br><span class="line">sudo usermod -G sudo trojanuser <span class="comment"># 设置用户sudo权限</span></span><br><span class="line">su -l trojanuser <span class="comment"># 切换用户</span></span><br></pre></td></tr></table></figure> 注意：在设置密码的时候，Linux系统的特性是不会显示任何提示的，包括 <code>*</code> 之类的符号，所以不要以为是输入密码没有反应，如图所示： <a href="https://pic.downk.cc/item/5eeee62714195aa5940ee0ca.jpg"><img src="https://pic.downk.cc/item/5eeee62714195aa5940ee0ca.jpg" alt="设置用户密码" /></a></p>
<h3 id="创建服务账户">4.2 创建服务账户</h3>
<p>Trojan是需要占用443端口，使用https协议，所以必然是要安装证书的。本教程使用acme.sh为Trojan生成证书，并配置了acme.sh的自动更新，包括代码和证书的更新。一方面，既然有配置自动更新就有可能出各种问题，毕竟你对更新之后的代码和证书是否可用一无所知。另一方面，acme.sh和Trojan均为开源软件，不一定值得信赖。基于此，为了降低acme.sh和Trojan对系统的影响和其相互影响，故需要单独为acme.sh和Trojan建立没有sudo权限的用户，从而降低风险。<br />
这里我们创建两个用户，分别为trojan和acme。其中用户trojan只需要运行trojan服务，无需登录，也无需家目录，故设置为系统用户即可。这里将用户acme也设置为系统用户，但是区别在于acme需要配置acme.sh，故需要家目录。注意到，我并未给用户acme设置密码，所以该用户也不能登录，只能通过其他已经登录的用户切换过去，这样尽可能的保证了系统的安全与任务的独立。因为trojan和acme都需要读写证书文件，所以将acme和trojan添加到同一个用户组certusers，待申请到证书后将证书所有权交给用户组certusers并允许组内用户访问即可。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd certusers</span><br><span class="line">sudo useradd -r -M -G certusers trojan</span><br><span class="line">sudo useradd -r -m -G certusers acme</span><br></pre></td></tr></table></figure> ### 4.3 安装依赖</p>
<blockquote>
<p>由于Debian系列系统和CentOS系列系统使用不同的包管理软件，所以安装软件的命令不一样，下面两个小节自己对照自己系统选择命令。</p>
</blockquote>
<h4 id="ubuntu-or-debian">4.3.1 Ubuntu or Debian</h4>
<h5 id="更新源">4.3.1.1 更新源</h5>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure> ##### 4.3.1.2 安装acme.sh需要的依赖</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y socat cron curl</span><br></pre></td></tr></table></figure> ##### 4.3.1.3 启动crontab</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start cron</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> cron</span><br></pre></td></tr></table></figure> ##### 4.3.1.4 安装Trojan需要的依赖</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y libcap2-bin xz-utils nano</span><br></pre></td></tr></table></figure> ##### 4.3.1.4 安装Nginx</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y nginx</span><br></pre></td></tr></table></figure> #### 4.3.2 CentOS</p>
<h5 id="安装acme.sh需要的依赖">4.3.2.1 安装acme.sh需要的依赖</h5>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y socat cronie curl</span><br></pre></td></tr></table></figure> ##### 4.3.2.2 启动crontab</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start crond</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> crond</span><br></pre></td></tr></table></figure> ##### 4.3.2.3 安装Trojan需要的依赖</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y xz nano</span><br></pre></td></tr></table></figure> ##### 4.3.2.4 安装Nginx</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure> ### 4.4 创建证书文件</p>
<h4 id="新建一个文件夹usrlocaletccertfiles用于存放证书">4.4.1 新建一个文件夹<code>/usr/local/etc/certfiles</code>用于存放证书</h4>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/<span class="built_in">local</span>/etc/certfiles</span><br></pre></td></tr></table></figure> #### 4.4.2 将证书文件夹所有者改为acme，使得用户acme有权限写入证书</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R acme:acme /usr/<span class="built_in">local</span>/etc/certfiles</span><br></pre></td></tr></table></figure> ### 4.5 配置证书</p>
<h4 id="安装acme.sh自动管理ca证书脚本">4.5.1 安装acme.sh自动管理CA证书脚本</h4>
<p>分别执行如下命令，不要复制 <code>#</code> 及之后的内容</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su -l -s /bin/bash acme <span class="comment"># 切换到 acme 用户</span></span><br><span class="line"></span><br><span class="line">curl  https://get.acme.sh | sh <span class="comment"># 下载安装 acme.sh</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出 acme 用户</span></span><br><span class="line"></span><br><span class="line">sudo su -l -s /bin/bash acme <span class="comment"># 再次切换到acme用户</span></span><br></pre></td></tr></table></figure> &gt; 注意：这里两次切换用户的操作不能省略，因为安装完acme.sh之后要重新登录当前用户，否则无法识别出acme.sh命令</p>
<h4 id="添加-cloudflare-global-ca-key">4.5.2 添加 cloudflare Global CA Key</h4>
<blockquote>
<p>不是使用cloudflare DNS的请查看域名申请与解析部分自己做调整！</p>
</blockquote>
<p>登录 cloudflare，选择进入自己的站点，向下滚动页面，找到 <code>获取您的 API 令牌</code>，点击进入 <a href="https://pic.downk.cc/item/5eeefceb14195aa59428f1b1.jpg"><img src="https://pic.downk.cc/item/5eeefceb14195aa59428f1b1.jpg" alt="进入API Key管理页面" /></a> 可以看到，这里有两个<code>API 密钥</code>，一个是<code>Global API Key</code>，一个是<code>Origin CA Key</code>，我们要使用的是<code>Global API Key</code>，不要选错了，而且每天的查看次数有限，所以，查看之后记得复制保存一下，免得等下不能看了。另外，该API Key非常重要，请慎重保存，不要轻易泄露。 <a href="https://pic.downk.cc/item/5eeefd3e14195aa594293530.jpg"><img src="https://pic.downk.cc/item/5eeefd3e14195aa594293530.jpg" alt="查看Global API Key" /></a> 然后回到远程连接的云服务器，执行一下两条命令：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CF_Key=<span class="string">&quot;&lt;Your Global API Key&gt;&quot;</span></span><br><span class="line"><span class="built_in">export</span> CF_Email=<span class="string">&quot;&lt;Your cloudflare account Email&gt;&quot;</span></span><br></pre></td></tr></table></figure> &gt; 注意：将 <code>"</code> 内的内容替换成你自己的，不要有 <code>&lt;&gt;</code>，我这里使用<code>&lt;&gt;</code>是表示这里的内容可替换，下面不再重复该提示</p>
<h4 id="申请证书">4.5.3 申请证书</h4>
<blockquote>
<p>不是使用cloudflare DNS的请查看域名申请与解析部分自己做调整！</p>
</blockquote>
<p>执行如下命令（注意域名&lt;tdom.ml&gt;改为你自己的域名），等待一会儿。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_cf -d &lt;tdom.ml&gt;</span><br></pre></td></tr></table></figure> 看到下图的提示表示证书申请成功。 <a href="https://pic.downk.cc/item/5eeeffe414195aa5942bb427.jpg"><img src="https://pic.downk.cc/item/5eeeffe414195aa5942bb427.jpg" alt="证书申请成功" /></a></p>
<blockquote>
<p>申请失败怎么办？证书申请失败的可能性一般有：1. CF_Key或CF_Email填写错误；证书申请次数超限等。此时切忌反复尝试，原因是证书每一个周申请次数是有限制的（20次），如果超限了就需要等一个周或者更换域名了（这个限制是争对每一个子域单独做的限制，所以万一超限了还可以用子域名继续部署）<br />
解决方案是：在上述命令后加–staging参数继续测试。测试通过之后，删除上图所示四个证书文件并取消–staging参数再执行一次。–staging参数申请的证书只作为测试用，客户端是无法认证通过的（提示SSL handshake failed: tlsv1 alert unknown ca），所以使用–staging参数申请到了证书之后要去掉–staging参数重新申请一次。</p>
</blockquote>
<h4 id="安装证书">4.5.4 安装证书</h4>
<p>执行如下两条命令（注意域名<code>&lt;tdom.ml&gt;</code>改为你自己的域名）</p>
<p>第一条：使用acme.sh将证书安装到certfiles目录，这样acme.sh更新证书的时候会自动将新的证书安装到这里。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d &lt;tdom.ml&gt; --key-file /usr/<span class="built_in">local</span>/etc/certfiles/private.key --fullchain-file /usr/<span class="built_in">local</span>/etc/certfiles/certificate.crt</span><br></pre></td></tr></table></figure> 第二条：配置acme.sh自动更新和自动更新证书，这样配置完Trojan之后一般不用管服务器。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></table></figure> #### 4.5.5 修改权限</p>
<p>最后还要允许组内用户访问证书。可通过如下命令实现：</p>
<p>将证书文件夹所在用户组改为certusers</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R acme:certusers /usr/<span class="built_in">local</span>/etc/certfiles</span><br></pre></td></tr></table></figure> 赋予证书文件夹组内用户读取权限，运行这两条命令之后用户trojan就有权限读取证书了</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod -R 750 /usr/<span class="built_in">local</span>/etc/certfiles</span><br><span class="line"></span><br></pre></td></tr></table></figure> 退出用户acme，因为证书已经安装完成</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure> ### 4.6 配置Trojan</p>
<h4 id="安装trojan">4.6.1 安装Trojan</h4>
<p>分别执行如下四个命令，注意看是否报错。</p>
<p>安装Trojan，安装完成一般会提示版本号，注意看是否是最新版本</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure> 将Trojan配置文件的所有者修改为用户trojan，由于使用sudo安装的Trojan，该配置文件默认是属于root用户的，而我们需要使用用户trojan运行Trojan，不修改所有者会导致启动Trojan遇到权限问题</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R trojan:trojan /usr/<span class="built_in">local</span>/etc/trojan</span><br></pre></td></tr></table></figure> 备份Trojan配置文件，以防万一</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /usr/<span class="built_in">local</span>/etc/trojan/config.json /usr/<span class="built_in">local</span>/etc/trojan/config.json.bak</span><br></pre></td></tr></table></figure> 使用nano修改配置文件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /usr/<span class="built_in">local</span>/etc/trojan/config.json</span><br></pre></td></tr></table></figure> 第四个命令执行完之后屏幕会显示Trojan的配置文件，定位到<code>password</code>、<code>cert</code>和<code>key</code>并修改。密码按自己喜好（该密码等下客户端要用），<code>cert</code>和<code>key</code>分别改为<code>/usr/local/etc/certfiles/certificate.crt</code>和<code>/usr/local/etc/certfiles/private.key</code>。编辑完成配置文件之后按屏幕下方快捷键提示（<code>^O</code>和<code>^X</code>即：<code>Ctrl+O</code>和<code>Ctrl+X</code>）保存并退出nano。修改之后的config文件如图所示。另外，如果有<code>IPv6</code>地址，将<code>local_addr</code>的<code>0.0.0.0</code>改为<code>::</code>才可以使用。</p>
<h4 id="启动trojan">4.6.2 启动Trojan</h4>
<h5 id="修改trojan启动用户">4.6.2.1 修改Trojan启动用户</h5>
<p>执行如下命令，打开trojan.service文件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/trojan.service</span><br></pre></td></tr></table></figure> 在 <code>[Service]</code> 标签中的 <code>StandardError=journal</code> 一行下，添加 <code>User=trojan</code> ，结果如下：</p>
<p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">StandardError=journal</span><br><span class="line">User=trojan</span><br><span class="line">ExecStart=&quot;/usr/local/bin/trojan&quot; &quot;/usr/local/etc/trojan/config.json&quot;</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">LimitNOFILE=51200</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=1s</span><br></pre></td></tr></table></figure> 然后重新加载配置文件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure> ##### 4.6.2.2 配置Trojan监听443端口</p>
<p>执行如下命令，赋予Trojan监听1024以下端口的能力，使得Trojan可以监听到443端口。这是由于我们使用非root用户启动Trojan，但是Linux默认不允许非root用户启动的进程监听1024以下的端口，除非为每一个二进制文件显式声明。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> CAP_NET_BIND_SERVICE=+eip /usr/<span class="built_in">local</span>/bin/trojan</span><br></pre></td></tr></table></figure> ##### 4.6.2.3 使用systemd启动Trojan</p>
<p>Trojan启动、查看状态命令分别如下：</p>
<p>启动Trojan</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart trojan</span><br></pre></td></tr></table></figure> 查看Trojan运行状态</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status trojan</span><br></pre></td></tr></table></figure> Trojan运行成功如下图： <a href="https://pic.downk.cc/item/5eef07ac14195aa594339444.jpg"><img src="https://pic.downk.cc/item/5eef07ac14195aa594339444.jpg" alt="trojan运行成功" /></a></p>
<h5 id="更新证书">4.6.2.4 更新证书</h5>
<p>当acme.sh重新安装证书之后，需要通知Trojan重新加载证书。最简单的方案是每三个月登录服务器重启Trojan，但是不够完美，毕竟重启的时候会导致服务中断。其实Trojan有实现 <a href="https://github.com/trojan-gfw/trojan/commit/53ca5f80fcd6239c28c8520886692e9186e3fcf6">reload certificate and private key</a> 功能，只需要在证书更新后给Trojan发送SIGUSR1消息即可。Trojan收到SIGUSR1消息后便会自动加载新的证书和密钥文件，这样就不用重启Trojan了。手动给Trojan发送SIGUSR1消息的命令是s<code>udo -u trojan killall -s SIGUSR1 trojan</code>，但是这样也不够完美，也得每三个月登录服务器运行一次该命令。其实我们可以给用户trojan添加定时任务，使其每个月运行一次该命令即可。实现如下：</p>
<p>首先，编辑用户trojan的crontab文件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u trojan crontab -e</span><br></pre></td></tr></table></figure> 在文件末尾添加一行如下，该行表示每个月1号的时候运行命令<code>killall -s SIGUSR1 trojan</code>，由于是使用用户trojan运行的，故不需要在前面加<code>sudo -u trojan</code>。</p>
<p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0 0 1 * * killall -s SIGUSR1 trojan</span><br></pre></td></tr></table></figure> 最后查看crontab是否生效。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u trojan crontab -l</span><br></pre></td></tr></table></figure> ##### 4.6.2.5 更新Trojan</p>
<p>如果Trojan版本有<a href="https://github.com/trojan-gfw/trojan/releases">更新</a>，那么使用本教程搭建的服务器端更新Trojan版本只需要三条命令即可。</p>
<p>更新Trojan &gt; 注意：会提示是否覆盖配置文件，如果没有必要请回答n，否则配置文件将会被覆盖（如果不小心覆盖了就得自己重新编辑了）</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure> 重新赋予Trojan监听443端口的能力</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> CAP_NET_BIND_SERVICE=+eip /usr/<span class="built_in">local</span>/bin/trojan</span><br></pre></td></tr></table></figure> 重启Trojan</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart trojan</span><br></pre></td></tr></table></figure> ### 4.7 配置Nginx</p>
<h4 id="写入虚拟主机到nginx配置文件">4.7.1 写入虚拟主机到Nginx配置文件</h4>
<p>由于Nginx配置在Debian系列系统和CentOS系列系统组织方式不同，所以配置文件位置和使用方式有细微区别，为了统一，我将CentOS系列系统的组织结构做细微调整。</p>
<p>在Debian系列系统中，Nginx的虚拟主机配置文件在<code>/etc/nginx/sites-available/</code>文件夹中，如果要开启某一个虚拟主机，则建立一个软连接到<code>/etc/nginx/sites-enabled/</code>文件夹并重启Nginx即可。默认虚拟主机在<code>/etc/nginx/sites-enabled/</code>文件夹，需要关闭掉，否则会冲突。</p>
<p>在CentOS系列系统中，Nginx的虚拟主机配置文件在<code>/etc/nginx/conf.d/</code>文件夹中以.conf后缀保存，写入之后就可以使用。默认虚拟主机集成在Nginx配置文件<code>/etc/nginx/nginx.conf</code>中，需要打开将其中的server块删除，否则会冲突。Debian系列系统中的<code>/etc/nginx/sites-enabled/</code>和<code>/etc/nginx/sites-available/</code>文件夹结构在CentOS系列系统中是没有的，不过这个策略很不错，可以很方便的开启和关闭虚拟主机，我这里手动调整一下。</p>
<h5 id="centos">4.7.1.1 CentOS</h5>
<p>按上述分析，我们使用下面两条命令在<code>/etc/nginx/</code>中添加两个文件夹。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /etc/nginx/sites-available</span><br><span class="line">sudo mkdir /etc/nginx/sites-enabled</span><br></pre></td></tr></table></figure> 执行如下命令使用nano打开Nginx配置文件，删除其中server块，并添加对<code>/etc/nginx/sites-enabled/</code>文件夹的索引。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure> 在<code>include /etc/nginx/conf.d/*.conf;</code>下添加一行：</p>
<p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">include /etc/nginx/sites-enabled/*;</span><br></pre></td></tr></table></figure> CentOS反向代理需要配置SELinux允许httpd模块可以联网，否则服务器会返回502错误。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo setsebool -P httpd_can_network_connect <span class="literal">true</span></span><br></pre></td></tr></table></figure> ##### 4.7.1.2 Ubuntu or Debian</p>
<p>使用如下命令关闭Nginx默认虚拟主机。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure> ##### 4.7.1.3 写入配置</p>
<p>执行如下命令，使用nano添加虚拟主机。(注意域名&lt;tdom.ml&gt;改为你自己的域名，这是虚拟主机的文件名，只是用来自己识别的。如果你已经有配置虚拟主机在这个文件中，可以自己使用cp命令备份一下或者换个名字也行，等介绍完基本配置再讲如何与现有服务集成。)</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/nginx/sites-available/&lt;tdom.ml&gt;</span><br></pre></td></tr></table></figure> 基于综述部分讲解的Trojan工作原理，现给定Nginx虚拟主机如下所示。这些虚拟主机可以直接拷贝到上面虚拟主机配置文件中再修改为你自己的，其中要修改的地方包括：</p>
<ul>
<li><p>第4行的<code>server_name</code>的值<code>&lt;tdom.ml&gt;</code>改为你自己的域名；</p></li>
<li><p>第7行的<code>proxy_pass</code>随便指向一个没有敏感信息的网站都可以，这就是你要反向代理的网站，这里我是用了RFC文档的地址；</p></li>
<li><p>第15行的<code>server_name</code>的值<code>&lt;10.10.10.10&gt;</code>改为你自己的IP；</p></li>
<li><p>第17行<code>&lt;tdom.ml&gt;</code>改为自己的域名，注意别填错了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80 default_server;</span><br><span class="line"></span><br><span class="line">    server_name &lt;tdom.ml&gt;;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://www.ietf.org;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80;</span><br><span class="line"></span><br><span class="line">    server_name &lt;10.10.10.10&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 301 https://&lt;tdom.ml&gt;<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 0.0.0.0:80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释一下这些虚拟主机的一些细节：第一个server接收来自Trojan的流量，与上面Trojan配置文件对应；第二个server也是接收来自Trojan的流量，但是这个流量尝试使用IP而不是域名访问服务器，所以将其认为是异常流量，并重定向到域名；第三个server接收除127.0.0.1:80外的所有80端口的流量并重定向到443端口，这样便开启了全站https，可有效的防止恶意探测。注意到，第一个和第二个server对应综述部分原理图中的蓝色数据流，第三个server对应综述部分原理图中的红色数据流，综述部分原理图中的绿色数据流不会流到Nginx。</p>
<p>将建好的虚拟机连接到Nginx，注意域名&lt;tdom.ml&gt;改为你自己的域名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/&lt;tdom.ml&gt; /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure>
<h4 id="启动nginx">4.7.2 启动Nginx</h4>
<p>Nginx启动命令和Trojan一样，就不过多解释了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure>
<h4 id="与现有nginx服务集成">4.7.3 与现有Nginx服务集成</h4>
<p>如果你本机已经有Nginx服务，那么Nginx配置文件需要做适当修改以和现有服务兼容。</p>
<p>在原服务与Trojan使用同一个域名且原来是监听443端口的情况下，那么需要将你的ssl配置删除并将监听地址改为第一个server监听的地址127.0.0.1:80，然后直接用修改好的server代替上述配置文件中第一个server即可。这样https加密部分将会由Trojan处理之后转发给Nginx而不是由Nginx处理，原来的服务对于客户端来说就没有变化。</p>
<p>如果原来的服务与Trojan使用不同的域名，建议是修改Trojan与原来的服务使用同一个域名，如果非要使用不同的域名，请参考第3点。</p>
<p>如果原来的服务就监听了多个域名，那么请自己琢磨Nginx的sni，参考连接：<a href="http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html">ngx_stream_ssl_preread_module</a>。</p>
<p>如果原来的服务是监听80端口，想要继续监听80端口那么直接去除第三个server即可，如果要改为监听443端口参考第1点。</p></li>
</ul>
<h3 id="配置trojan和nginx开机自启">4.8 配置Trojan和Nginx开机自启</h3>
<p>虽然开机自启一般用不着，除非vultr机房停电，但是反正也没什么代价，弄一下吧。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> trojan</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure> ### 4.9 检查服务器是否配置成功</p>
<p>到这里服务器就配置完成了。此时你可以在浏览器里面访问你的网站看是否能够访问，如果你的网站可以访问了，那么就一切正常啦。</p>
<ul>
<li>浏览器中使用ip访问：重定向到<a href="https://tdom.ml" class="uri">https://tdom.ml</a>;</li>
<li>浏览器中使用<a href="https://ip" class="uri">https://ip</a>访问：重定向到<a href="https://tdom.ml" class="uri">https://tdom.ml</a>(跳转的时候浏览器可能提示不安全是正常的);</li>
<li>浏览器中使用tdom.ml访问：重定向到<a href="https://tdom.ml" class="uri">https://tdom.ml</a></li>
</ul>
<h3 id="启动bbr可选建议">4.10 启动bbr（可选，建议）</h3>
<p>启动bbr需要Linux内核版本在4.10及以上，如果低于该版本需要自己升级（这不在本教程范围之后）内核版本，保证内核版本不低于4.10。查看系统内核版本命令如下。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure> bbr是谷歌开发的网络控制算法，可以加快访问速度。执行下面命令查看当前系统是否启用bbr。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure> 执行完成之后如果提示<code>net.ipv4.tcp_congestion_control = bbr</code>即表示启动了bbr，可以跳过下面启动bbr的步骤。</p>
<p>执行以下三条命令，启动bbr</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo bash -c <span class="string">&#x27;echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf&#x27;</span></span><br><span class="line">sudo bash -c <span class="string">&#x27;echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf&#x27;</span></span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure> ### 4.11 配置防火墙</p>
<p>只打开22、80和443端口可以有效的阻止外部恶意流量，降低服务器暴露的风险。此步骤非必须，而且自己有其他服务记得其他服务的端口也要处理。</p>
<p>本文以ufw为例配置防火墙，ufw是一个很好用的防火墙配置命令，可以简化操作，减少错误的发生。</p>
<h4 id="安装ufw">4.11.1 安装ufw</h4>
<h5 id="debian-or-ubuntu">4.11.1.1 Debian or Ubuntu</h5>
<p>执行如下命令安装ufw：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y ufw</span><br></pre></td></tr></table></figure> ##### 4.11.1.2 CentOS</p>
<p>执行如下两个命令安装ufw：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br><span class="line">sudo yum install -y ufw</span><br></pre></td></tr></table></figure> #### 4.11.2 如果服务器无IPv6地址</p>
<p>需要执行如下命令，将IPV6=yes修改为IPV6=no</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/default/ufw</span><br></pre></td></tr></table></figure> #### 4.11.3 配置防火墙</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br><span class="line">sudo ufw allow ssh</span><br><span class="line">sudo ufw allow https</span><br><span class="line">sudo ufw allow http</span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line">sudo ufw status verbose</span><br></pre></td></tr></table></figure> &gt; 另外，如果对Trojan不放心，那么可以参考trojan wiki，优化防火墙配置，使得Trojan只能给127.0.0.1:80发送数据和响应外部请求。</p>
<h2 id="配置trojan客户端">5. 配置trojan客户端</h2>
<p><a href="https://github.com/Trojan-Qt5/Trojan-Qt5/releases/tag/v1.2.0">Trojan-Qt5</a>是一个专为trojan开发的跨平台的GUI客户端，目前支持Windows、Linux、Mac。 <a href="https://pic.downk.cc/item/5eef299714195aa5945362bb.jpg"><img src="https://pic.downk.cc/item/5eef299714195aa5945362bb.jpg" alt="Trojan-Qt5主窗口" /></a> 点击<code>连接-&gt;添加-&gt;手动-&gt;Trojan</code>添加服务器， <a href="https://pic.downk.cc/item/5eef2b6a14195aa59455b90f.jpg"><img src="https://pic.downk.cc/item/5eef2b6a14195aa59455b90f.jpg" alt="添加服务器" /></a> 其他配置项不懂的话不要动，就按照默认的即可。<br />
小图标右键菜单，还可以设置代理模式和PAC模式，可以根据需要进行调整。</p>
<h2 id="switchyomega配置">6. SwitchyOmega配置</h2>
<p>SwitchyOmega是Chrome上的一款插件，网上有教程，用法此处不再赘述，可以配合使用已达到更好的效果。</p>
<h2 id="fqa">7. FQA</h2>
<h3 id="err_ssl_protocol_error">7.1 ERR_SSL_PROTOCOL_ERROR</h3>
<blockquote>
<p>在配置完服务器和客户端之后，访问Google，发现提示无法提供安全访问链接，并且有<code>ERR_SSL_PROTOCOL_ERROR</code>的错误提示</p>
</blockquote>
<p>查了很久，发现是Cloudflare的CDN打开了，这个不能开的，如果打开了就会出现这个情况。另外，可以ba把Cloudflare中的SSL设置为严格模式。</p>
]]></content>
      <categories>
        <category>科学上网</category>
        <category>Trojan</category>
      </categories>
      <tags>
        <tag>Trojan</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
</search>
